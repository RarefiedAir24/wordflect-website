{
  "/Users/frankschioppa/wordflect-website/backend/serverless.yml": {
    "versionFramework": "4.19.1",
    "servicePath": "/Users/frankschioppa/wordflect-website/backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "wordflect-backend",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "stage": "dev",
        "region": "us-east-2",
        "environment": {
          "USERS_TABLE": "wordflect-backend-users-dev",
          "MISSIONS_TABLE": "wordflect-backend-missions-dev",
          "FRAMES_TABLE": "wordflect-backend-frames-dev",
          "BATTLES_TABLE": "wordflect-backend-battles-dev",
          "JWT_SECRET": "<REDACTED>",
          "PASSWORD_RESET_TABLE": "<REDACTED>",
          "SES_FROM_EMAIL": "noreply@wordflect.com",
          "WORDNIK_API_KEY": "<REDACTED>"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Query",
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:DeleteItem",
              "dynamodb:UpdateItem",
              "ses:SendEmail",
              "ses:SendRawEmail",
              "s3:PutObject",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObjectAcl",
              "dynamodb:Scan"
            ],
            "Resource": [
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev",
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev/index/*",
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-missions-dev",
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-frames-dev",
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev",
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev/index/*",
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-password-reset-tokens-dev",
              "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-word-of-the-day-dev",
              "arn:aws:dynamodb:us-east-2:*:table/WordOfTheDay",
              "arn:aws:ses:us-east-2:*:identity/wordflect.com",
              "arn:aws:ses:us-east-2:*:identity/supergeek@me.com",
              "arn:aws:ses:us-east-2:*:identity/*",
              "arn:aws:s3:::wordflect-profile-images",
              "arn:aws:s3:::wordflect-profile-images/*",
              "arn:aws:s3:::wordflect-profile-images/profile-images/*",
              "arn:aws:s3:::wordflect-profile-images/profile-images/*/*"
            ]
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "TestLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-test"
              }
            },
            "SigninLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-signin"
              }
            },
            "SignupLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-signup"
              }
            },
            "OauthLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-oauth"
              }
            },
            "OauthCheckLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-oauthCheck"
              }
            },
            "RequestPasswordResetLogGroup": "<REDACTED>",
            "ResetPasswordLogGroup": "<REDACTED>",
            "CheckEmailLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-checkEmail"
              }
            },
            "GetUserProfileLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserProfile"
              }
            },
            "GetUserStatisticsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserStatistics"
              }
            },
            "GetUserDailyStatsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserDailyStats"
              }
            },
            "GetUserWeeklyStatsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserWeeklyStats"
              }
            },
            "GetUserMonthlyStatsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserMonthlyStats"
              }
            },
            "TrackUserSessionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-trackUserSession"
              }
            },
            "GetUserThemeAnalyticsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserThemeAnalytics"
              }
            },
            "GetUserThemeDayStatsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserThemeDayStats"
              }
            },
            "UpdateUserStatsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateUserStats"
              }
            },
            "GetProfileImageUploadUrlLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getProfileImageUploadUrl"
              }
            },
            "UpdateProfileImageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateProfileImage"
              }
            },
            "GetUserProfileBackgroundLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserProfileBackground"
              }
            },
            "UpdateUserProfileBackgroundLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateUserProfileBackground"
              }
            },
            "GetLeaderboardLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getLeaderboard"
              }
            },
            "GetUserMissionsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserMissions"
              }
            },
            "CompleteUserMissionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-completeUserMission"
              }
            },
            "MissionRewardsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-missionRewards"
              }
            },
            "GetWordDefinitionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getWordDefinition"
              }
            },
            "GetWordOfTheDayLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getWordOfTheDay"
              }
            },
            "GetUserFramesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserFrames"
              }
            },
            "SelectUserFrameLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-selectUserFrame"
              }
            },
            "PurchaseFrameLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-purchaseFrame"
              }
            },
            "PurchasePremiumLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-purchasePremium"
              }
            },
            "VerifySubscriptionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-verifySubscription"
              }
            },
            "VerifyPurchaseLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-verifyPurchase"
              }
            },
            "CreateBattleInvitationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-createBattleInvitation"
              }
            },
            "GetBattleInvitationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getBattleInvitations"
              }
            },
            "RespondToBattleInvitationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-respondToBattleInvitation"
              }
            },
            "SubmitBattleScoreLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-submitBattleScore"
              }
            },
            "GetActiveBattlesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getActiveBattles"
              }
            },
            "GetBattleHistoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-getBattleHistory"
              }
            },
            "UpdateBattleScoreLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateBattleScore"
              }
            },
            "CompleteBattleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-completeBattle"
              }
            },
            "CleanupOldBattlesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-cleanupOldBattles"
              }
            },
            "AuthorizerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-authorizer"
              }
            },
            "ProcessLeaderboardLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-processLeaderboard"
              }
            },
            "LoginEventLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-loginEvent"
              }
            },
            "SetWordOfTheDayLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-setWordOfTheDay"
              }
            },
            "SearchUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-searchUsers"
              }
            },
            "DebugUserWordsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/wordflect-backend-dev-debugUserWords"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "wordflect-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wordflect-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wordflect-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:UpdateItem",
                            "ses:SendEmail",
                            "ses:SendRawEmail",
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:ListBucket",
                            "s3:PutObjectAcl",
                            "dynamodb:Scan"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev",
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev/index/*",
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-missions-dev",
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-frames-dev",
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev",
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev/index/*",
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-password-reset-tokens-dev",
                            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-word-of-the-day-dev",
                            "arn:aws:dynamodb:us-east-2:*:table/WordOfTheDay",
                            "arn:aws:ses:us-east-2:*:identity/wordflect.com",
                            "arn:aws:ses:us-east-2:*:identity/supergeek@me.com",
                            "arn:aws:ses:us-east-2:*:identity/*",
                            "arn:aws:s3:::wordflect-profile-images",
                            "arn:aws:s3:::wordflect-profile-images/*",
                            "arn:aws:s3:::wordflect-profile-images/profile-images/*",
                            "arn:aws:s3:::wordflect-profile-images/profile-images/*/*"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "wordflect-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "TestLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/test.zip"
                },
                "Handler": "src/handlers/testHandler.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-test",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "TestLogGroup"
              ]
            },
            "SigninLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/signin.zip"
                },
                "Handler": "src/handlers/authSignin.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-signin",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SigninLogGroup"
              ]
            },
            "SignupLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/signup.zip"
                },
                "Handler": "src/handlers/authSignup.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-signup",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SignupLogGroup"
              ]
            },
            "OauthLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/oauth.zip"
                },
                "Handler": "src/handlers/authOAuth.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-oauth",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "OauthLogGroup"
              ]
            },
            "OauthCheckLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/oauthCheck.zip"
                },
                "Handler": "src/handlers/authOAuthCheck.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-oauthCheck",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "OauthCheckLogGroup"
              ]
            },
            "RequestPasswordResetLambdaFunction": "<REDACTED>",
            "ResetPasswordLambdaFunction": "<REDACTED>",
            "CheckEmailLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/checkEmail.zip"
                },
                "Handler": "src/handlers/checkEmail.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-checkEmail",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CheckEmailLogGroup"
              ]
            },
            "GetUserProfileLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserProfile.zip"
                },
                "Handler": "src/handlers/getUserProfile.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserProfile",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserProfileLogGroup"
              ]
            },
            "GetUserStatisticsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserStatistics.zip"
                },
                "Handler": "src/handlers/getUserStatistics.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserStatistics",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserStatisticsLogGroup"
              ]
            },
            "GetUserDailyStatsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserDailyStats.zip"
                },
                "Handler": "src/handlers/getUserDailyStats.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserDailyStats",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserDailyStatsLogGroup"
              ]
            },
            "GetUserWeeklyStatsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserWeeklyStats.zip"
                },
                "Handler": "src/handlers/getUserWeeklyStats.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserWeeklyStats",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserWeeklyStatsLogGroup"
              ]
            },
            "GetUserMonthlyStatsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserMonthlyStats.zip"
                },
                "Handler": "src/handlers/getUserMonthlyStats.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserMonthlyStats",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserMonthlyStatsLogGroup"
              ]
            },
            "TrackUserSessionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/trackUserSession.zip"
                },
                "Handler": "src/handlers/trackUserSession.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-trackUserSession",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "TrackUserSessionLogGroup"
              ]
            },
            "GetUserThemeAnalyticsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserThemeAnalytics.zip"
                },
                "Handler": "src/handlers/getUserThemeAnalytics.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserThemeAnalytics",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserThemeAnalyticsLogGroup"
              ]
            },
            "GetUserThemeDayStatsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserThemeDayStats.zip"
                },
                "Handler": "src/handlers/getUserThemeDayStats.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserThemeDayStats",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserThemeDayStatsLogGroup"
              ]
            },
            "UpdateUserStatsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateUserStats.zip"
                },
                "Handler": "src/handlers/updateUserStats.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-updateUserStats",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserStatsLogGroup"
              ]
            },
            "GetProfileImageUploadUrlLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getProfileImageUploadUrl.zip"
                },
                "Handler": "src/handlers/getProfileImageUploadUrl.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getProfileImageUploadUrl",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetProfileImageUploadUrlLogGroup"
              ]
            },
            "UpdateProfileImageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateProfileImage.zip"
                },
                "Handler": "src/handlers/updateProfileImage.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-updateProfileImage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateProfileImageLogGroup"
              ]
            },
            "GetUserProfileBackgroundLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserProfileBackground.zip"
                },
                "Handler": "src/handlers/getUserProfileBackground.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserProfileBackground",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserProfileBackgroundLogGroup"
              ]
            },
            "UpdateUserProfileBackgroundLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateUserProfileBackground.zip"
                },
                "Handler": "src/handlers/updateUserProfileBackground.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-updateUserProfileBackground",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserProfileBackgroundLogGroup"
              ]
            },
            "GetLeaderboardLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getLeaderboard.zip"
                },
                "Handler": "src/handlers/getLeaderboard.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getLeaderboard",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetLeaderboardLogGroup"
              ]
            },
            "GetUserMissionsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserMissions.zip"
                },
                "Handler": "src/handlers/getUserMissions.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserMissions",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>",
                    "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserMissionsLogGroup"
              ]
            },
            "CompleteUserMissionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/completeUserMission.zip"
                },
                "Handler": "src/handlers/completeUserMission.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-completeUserMission",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CompleteUserMissionLogGroup"
              ]
            },
            "MissionRewardsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/missionRewards.zip"
                },
                "Handler": "src/handlers/missionRewards.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-missionRewards",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "MissionRewardsLogGroup"
              ]
            },
            "GetWordDefinitionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getWordDefinition.zip"
                },
                "Handler": "src/handlers/getWordDefinition.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getWordDefinition",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetWordDefinitionLogGroup"
              ]
            },
            "GetWordOfTheDayLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getWordOfTheDay.zip"
                },
                "Handler": "src/handlers/getWordOfTheDay.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getWordOfTheDay",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>",
                    "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetWordOfTheDayLogGroup"
              ]
            },
            "GetUserFramesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserFrames.zip"
                },
                "Handler": "src/handlers/getUserFrames.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getUserFrames",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserFramesLogGroup"
              ]
            },
            "SelectUserFrameLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/selectUserFrame.zip"
                },
                "Handler": "src/handlers/selectUserFrame.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-selectUserFrame",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SelectUserFrameLogGroup"
              ]
            },
            "PurchaseFrameLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/purchaseFrame.zip"
                },
                "Handler": "src/handlers/purchaseFrame.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-purchaseFrame",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PurchaseFrameLogGroup"
              ]
            },
            "PurchasePremiumLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/purchasePremium.zip"
                },
                "Handler": "src/handlers/purchasePremium.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-purchasePremium",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PurchasePremiumLogGroup"
              ]
            },
            "VerifySubscriptionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/verifySubscription.zip"
                },
                "Handler": "src/handlers/verifySubscription.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-verifySubscription",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "VerifySubscriptionLogGroup"
              ]
            },
            "VerifyPurchaseLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/verifyPurchase.zip"
                },
                "Handler": "src/handlers/verifyPurchase.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-verifyPurchase",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "VerifyPurchaseLogGroup"
              ]
            },
            "CreateBattleInvitationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/createBattleInvitation.zip"
                },
                "Handler": "src/handlers/createBattleInvitation.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-createBattleInvitation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateBattleInvitationLogGroup"
              ]
            },
            "GetBattleInvitationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getBattleInvitations.zip"
                },
                "Handler": "src/handlers/getBattleInvitations.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getBattleInvitations",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetBattleInvitationsLogGroup"
              ]
            },
            "RespondToBattleInvitationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/respondToBattleInvitation.zip"
                },
                "Handler": "src/handlers/respondToBattleInvitation.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-respondToBattleInvitation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RespondToBattleInvitationLogGroup"
              ]
            },
            "SubmitBattleScoreLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/submitBattleScore.zip"
                },
                "Handler": "src/handlers/submitBattleScore.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-submitBattleScore",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SubmitBattleScoreLogGroup"
              ]
            },
            "GetActiveBattlesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getActiveBattles.zip"
                },
                "Handler": "src/handlers/getActiveBattles.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getActiveBattles",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetActiveBattlesLogGroup"
              ]
            },
            "GetBattleHistoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getBattleHistory.zip"
                },
                "Handler": "src/handlers/getBattleHistory.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-getBattleHistory",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetBattleHistoryLogGroup"
              ]
            },
            "UpdateBattleScoreLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateBattleScore.zip"
                },
                "Handler": "src/handlers/updateBattleScore.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-updateBattleScore",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateBattleScoreLogGroup"
              ]
            },
            "CompleteBattleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/completeBattle.zip"
                },
                "Handler": "src/handlers/completeBattle.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-completeBattle",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CompleteBattleLogGroup"
              ]
            },
            "CleanupOldBattlesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/cleanupOldBattles.zip"
                },
                "Handler": "src/handlers/cleanupOldBattles.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-cleanupOldBattles",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CleanupOldBattlesLogGroup"
              ]
            },
            "AuthorizerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/authorizer.zip"
                },
                "Handler": "src/handlers/authorizer.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-authorizer",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AuthorizerLogGroup"
              ]
            },
            "ProcessLeaderboardLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/processLeaderboard.zip"
                },
                "Handler": "src/handlers/processLeaderboard.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-processLeaderboard",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ProcessLeaderboardLogGroup"
              ]
            },
            "LoginEventLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/loginEvent.zip"
                },
                "Handler": "src/handlers/loginEvent.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-loginEvent",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LoginEventLogGroup"
              ]
            },
            "SetWordOfTheDayLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/setWordOfTheDay.zip"
                },
                "Handler": "src/handlers/setWordOfTheDay.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-setWordOfTheDay",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>",
                    "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SetWordOfTheDayLogGroup"
              ]
            },
            "SearchUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/searchUsers.zip"
                },
                "Handler": "src/handlers/searchUsers.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-searchUsers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SearchUsersLogGroup"
              ]
            },
            "DebugUserWordsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                  "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/debugUserWords.zip"
                },
                "Handler": "src/handlers/debugUserWords.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "wordflect-backend-dev-debugUserWords",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "wordflect-backend-users-dev",
                    "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                    "FRAMES_TABLE": "wordflect-backend-frames-dev",
                    "BATTLES_TABLE": "wordflect-backend-battles-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "PASSWORD_RESET_TABLE": "<REDACTED>",
                    "SES_FROM_EMAIL": "noreply@wordflect.com",
                    "WORDNIK_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DebugUserWordsLogGroup"
              ]
            },
            "TestLambdaVersionTYfl025watCqC5Vz3Cw10VyKTZLQ2ZmLKi7P838NU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "TestLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "SigninLambdaVersionAOmV5SqgyilyIbWAXupWSnryrvVBlNFevq5dyGVgM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SigninLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "SignupLambdaVersions1Ts4FeTOFaQm6XiOvY5h1ffRRTfcGwSEYHjXjE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SignupLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "OauthLambdaVersionwG5HIwqdakZmvNBMSjUafEpLl67IROt6oyYmuGJUgPM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "OauthLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "ResetPasswordLambdaVersionTzULEnBvPZtpjLXW6M8jMYzdLj3RwP8Jxcb4yJPcpY": "<REDACTED>",
            "CheckEmailLambdaVersionn5BGnsKxN8Qyf8Lg0Auwj7Gl5T0RWnsucBpNP4H20A": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CheckEmailLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserProfileLambdaVersionlpRk5rfK08mzfgV7QfIvroiQhDMNTLgLRqQbuzCqqY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserProfileLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserDailyStatsLambdaVersionJQuSGFBLKHhZNx8rjsxI6JR5pzTwXYDlBZF2jbiXww": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserDailyStatsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserWeeklyStatsLambdaVersionBCJVzWfasFDCSz4QicmuUclbGvdfGNCUDVkgb79rYs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserWeeklyStatsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "OauthCheckLambdaVersionAs5hbRdDM4FDQZmWJ4qC2wzgPjT6pkBqD6fv6V514": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "OauthCheckLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserStatisticsLambdaVersionxIGbedBdXwuGZRPh0JuLXCPAQXSYVml9gCgUhFA98": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserStatisticsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "RequestPasswordResetLambdaVersionGe5MUty04QwAu6zih10hKEHb0hwMe8xzbkSvAPqtlFg": "<REDACTED>",
            "GetUserMonthlyStatsLambdaVersionZeBAGoMUdfDzYx1PWdoUxyvk628hJc98fi26vJcFs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserMonthlyStatsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "TrackUserSessionLambdaVersionMEAuqFmJQoofpMTs1IzOvBVZHu9E6yk6F6Prf0eYc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "TrackUserSessionLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserThemeDayStatsLambdaVersionmrX9uAKj5yWeAg4EbbgZtE0Qa5yutvMyUla9zVXHI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserThemeDayStatsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetProfileImageUploadUrlLambdaVersionDIqeWbAptfIO28kxHm6HOpnQgWOoOaqdpdV0cs34wNQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetProfileImageUploadUrlLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "UpdateUserStatsLambdaVersionOdJyikUvjPMmu8bdBhHD6CYfCRpCQBYs5nGmvQMdgNI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserStatsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserThemeAnalyticsLambdaVersionZpC3oWNLbN41cRYyhgMHAtDXCfnZVCYFHbWGVVMwQEI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserThemeAnalyticsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "UpdateProfileImageLambdaVersionXlz4eQPATKmHSj9g4TM1fT26eBJKnQAz29KdKWwhdc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateProfileImageLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "UpdateUserProfileBackgroundLambdaVersionmhEpFxDx6ICIlcRvQVgCtPQjVC8YmHPZsJDsyw7qkgY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserProfileBackgroundLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserProfileBackgroundLambdaVersionZXiz6RU3g3ZKLsiBizGREkHTSyDMCATH0ctFr6DdSA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserProfileBackgroundLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetLeaderboardLambdaVersionMfXVt3Y1BEHyhRlhyhxqXNywVziJCyr1AHKDEc4io": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetLeaderboardLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserMissionsLambdaVersionDWbnHv2K137sxPt09bvauTZkQbGQHSGbdn4yFHnEA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserMissionsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "CompleteUserMissionLambdaVersionx36gsWs8GwF6ULatMOVnvipW9GOmyXFMTvoLydjU0E": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CompleteUserMissionLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "MissionRewardsLambdaVersionHEWJvvobcdAQWCMUZ5cB518hnn8CvX292MTIOvfcio": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "MissionRewardsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetWordOfTheDayLambdaVersionj6eIcf2mUX15dFqp8ReX0jYF5HXcIB70IJ3j7IrM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetWordOfTheDayLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetUserFramesLambdaVersionRGGnmox6U42zrjVVA1GEY0IaHiKVvpdb9LkS06FELl4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserFramesLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetWordDefinitionLambdaVersionOHh2fmrpnkQSlv8J1SHrfxbQ0xIccRcyAGpP53Btp0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetWordDefinitionLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "SelectUserFrameLambdaVersionfBvTu9m2YHvlJsdVSDYSJ5gvUa4re2GJwXqF3Wxd8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SelectUserFrameLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "PurchasePremiumLambdaVersionHjtY3EYTj8fQXy420bn3WCb7Pz6ZFh1tO90HRh18": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PurchasePremiumLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "PurchaseFrameLambdaVersionMCQO2VLB8RlR3bIqv0e6Vf0fenXdeCDS7OKCOAUBs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PurchaseFrameLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "VerifySubscriptionLambdaVersioniSlqMUPZ0zvMrLEQJpCLE2nPAwgHBul7dUHIPlRLk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "VerifySubscriptionLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "VerifyPurchaseLambdaVersion7RgMtBD0sHxAWQxIOuT5vzw9ghO3z9x47uYT4iTtdg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "VerifyPurchaseLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "CreateBattleInvitationLambdaVersionqOfZM8KbZd5qVqehzWk3XxlJn4FbxIEuJBECtcoqRzQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateBattleInvitationLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetBattleInvitationsLambdaVersiondTewCKX7zqyplhIEgwhYmP5xDBztHGZ0bZ4J7Uj3g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetBattleInvitationsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "RespondToBattleInvitationLambdaVersioninxp10clyZ4TOrUgUzJEqOLE77GK3LPnJP4zgjF1a6Y": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RespondToBattleInvitationLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "SubmitBattleScoreLambdaVersionTv2XFcnLuiBiWZN2XKAKbMGn1t8YLO8A45C32OVKU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SubmitBattleScoreLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetActiveBattlesLambdaVersionnln35JieEfadwa7xBnbW9vEJe70oOq0XfvgkKIP70A": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetActiveBattlesLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "GetBattleHistoryLambdaVersionyRszlz29L9CAQgJ8DmGgw5phBXdv7hupG0PEox5pNi4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetBattleHistoryLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "UpdateBattleScoreLambdaVersiony8d2PraFiSFZdOTMNU3ZiB3x1E1oToQpTLRXc9vK8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateBattleScoreLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "CompleteBattleLambdaVersionD1Jm7HHMuGWMekzDnlM6j8mZCFVHRs3Ns0MFyUwQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CompleteBattleLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "CleanupOldBattlesLambdaVersionL5DRmZ08bj1NdHaXDoUx2jFDZsJWeXugIIYj83NpAo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CleanupOldBattlesLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "AuthorizerLambdaVersionLtjGPoNOyP2AAkPJMms5pgJXMDFQ0ceXmobmCJICU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AuthorizerLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "ProcessLeaderboardLambdaVersionXizgJ6VKrdAYeCXPCvaX5u1JrM4xzAMAzpEhH0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ProcessLeaderboardLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "LoginEventLambdaVersionX6I2uUZSt3zP0MIZWaaRSk3GVi4f6KCkpXY7v3o4g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LoginEventLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "SearchUsersLambdaVersionzkx8pPQm7Gr6MpxnACNkimVSkcXWQ6cR73kl80nBb0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SearchUsersLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "SetWordOfTheDayLambdaVersionlVprrqPe9VQwgTJ6nH2mjBWo0PFMb4lgf30KwL8dwM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SetWordOfTheDayLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "DebugUserWordsLambdaVersionIqoRQdN9WBqAGPgJNZRNBjjQhyYxtCC4lUkp8YHfMjs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DebugUserWordsLambdaFunction"
                },
                "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
              }
            },
            "CleanupOldBattlesEventsRuleSchedule1": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "cron(0 3 * * ? *)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Arn": {
                      "Fn::GetAtt": [
                        "CleanupOldBattlesLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "cleanupOldBattlesSchedule"
                  }
                ]
              }
            },
            "CleanupOldBattlesLambdaPermissionEventsRuleSchedule1": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CleanupOldBattlesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "CleanupOldBattlesEventsRuleSchedule1",
                    "Arn"
                  ]
                }
              }
            },
            "ProcessLeaderboardEventsRuleSchedule1": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "cron(0 2 1 * ? *)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Arn": {
                      "Fn::GetAtt": [
                        "ProcessLeaderboardLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "processLeaderboardSchedule"
                  }
                ]
              }
            },
            "ProcessLeaderboardLambdaPermissionEventsRuleSchedule1": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProcessLeaderboardLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ProcessLeaderboardEventsRuleSchedule1",
                    "Arn"
                  ]
                }
              }
            },
            "SetWordOfTheDayEventsRuleSchedule1": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "cron(0 0 * * ? *)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Arn": {
                      "Fn::GetAtt": [
                        "SetWordOfTheDayLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "setWordOfTheDaySchedule"
                  }
                ]
              }
            },
            "SetWordOfTheDayLambdaPermissionEventsRuleSchedule1": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SetWordOfTheDayLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "SetWordOfTheDayEventsRuleSchedule1",
                    "Arn"
                  ]
                }
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-wordflect-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceTest": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "test",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSignin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "signin",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSignup": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "signup",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "auth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthOauth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "oauth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthOauthDashcheck": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "oauth-check",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceRequestDashpasswordDashreset": "<REDACTED>",
            "ApiGatewayResourceResetDashpassword": "<REDACTED>",
            "ApiGatewayResourceCheckDashemail": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "check-email",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserProfile": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "profile",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserStatistics": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "statistics",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserStatisticsDetailed": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserStatistics"
                },
                "PathPart": "detailed",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserStatisticsDaily": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserStatistics"
                },
                "PathPart": "daily",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserStatisticsWeekly": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserStatistics"
                },
                "PathPart": "weekly",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserStatisticsMonthly": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserStatistics"
                },
                "PathPart": "monthly",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserSession": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "session",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserSessionTrack": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserSession"
                },
                "PathPart": "track",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserTheme": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "theme",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserThemeAnalytics": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserTheme"
                },
                "PathPart": "analytics",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserThemeDay": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserTheme"
                },
                "PathPart": "day",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserUpdateDashstats": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "update-stats",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserProfileDashimageDashuploadDashurl": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "profile-image-upload-url",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserProfileDashimage": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "profile-image",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserProfileDashbackground": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "profile-background",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserMissions": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "missions",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserMissionsRewards": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUserMissions"
                },
                "PathPart": "rewards",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserCompleteDashmission": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "complete-mission",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserSelectDashframe": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "select-frame",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserPurchaseDashframe": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "purchase-frame",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserPurchaseDashpremium": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "purchase-premium",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserVerifyDashsubscription": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "verify-subscription",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserVerifyDashpurchase": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "verify-purchase",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserLoginDashevent": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "login-event",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLeaderboard": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "leaderboard",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceWord": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "word",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceWordDefinition": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceWord"
                },
                "PathPart": "definition",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceWordDashofDashtheDashday": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "word-of-the-day",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceFrames": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "frames",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattles": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "battles",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesInvite": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattles"
                },
                "PathPart": "invite",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesInvitations": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattles"
                },
                "PathPart": "invitations",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesInvitationsInvitationidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattlesInvitations"
                },
                "PathPart": "{invitationId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVar"
                },
                "PathPart": "respond",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesSubmitDashscore": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattles"
                },
                "PathPart": "submit-score",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesActive": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattles"
                },
                "PathPart": "active",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesHistory": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattles"
                },
                "PathPart": "history",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesScore": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattles"
                },
                "PathPart": "score",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBattlesComplete": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBattles"
                },
                "PathPart": "complete",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthorizer": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "authorizer",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSetDashwordDashofDashtheDashday": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "set-word-of-the-day",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersSearch": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "search",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDebug": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "debug",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDebugUserDashwords": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceDebug"
                },
                "PathPart": "user-words",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTestOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTest"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSignupOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSignup"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthOauthOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthOauth"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthOauthDashcheckOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthOauthDashcheck"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRequestDashpasswordDashresetOptions": "<REDACTED>",
            "ApiGatewayMethodResetDashpasswordOptions": "<REDACTED>",
            "ApiGatewayMethodCheckDashemailOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCheckDashemail"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserProfileOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserStatisticsDetailedOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsDetailed"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserStatisticsDailyOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsDaily"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserStatisticsWeeklyOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsWeekly"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserStatisticsMonthlyOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsMonthly"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserSessionTrackOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserSessionTrack"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserThemeAnalyticsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserThemeAnalytics"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserThemeDayOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserThemeDay"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserUpdateDashstatsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserUpdateDashstats"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserProfileDashimageDashuploadDashurlOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfileDashimageDashuploadDashurl"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserProfileDashimageOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfileDashimage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserProfileDashbackgroundOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfileDashbackground"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLeaderboardOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLeaderboard"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserMissionsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserMissions"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserCompleteDashmissionOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserCompleteDashmission"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserMissionsRewardsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserMissionsRewards"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodWordDefinitionOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceWordDefinition"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodWordDashofDashtheDashdayOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceWordDashofDashtheDashday"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodFramesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFrames"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserSelectDashframeOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserSelectDashframe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserPurchaseDashframeOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserPurchaseDashframe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserPurchaseDashpremiumOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserPurchaseDashpremium"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserVerifyDashsubscriptionOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserVerifyDashsubscription"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserVerifyDashpurchaseOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserVerifyDashpurchase"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesInviteOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesInvite"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesInvitationsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesInvitations"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesSubmitDashscoreOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesSubmitDashscore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesActiveOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesActive"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesHistoryOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesHistory"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesScoreOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesScore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBattlesCompleteOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesComplete"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthorizerOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthorizer"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUserLoginDasheventOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserLoginDashevent"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSetDashwordDashofDashtheDashdayOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSetDashwordDashofDashtheDashday"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersSearchOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersSearch"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDebugUserDashwordsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDebugUserDashwords"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTestGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTest"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "TestLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "TestLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSigninPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSignin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SigninLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SigninLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSigninOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "OPTIONS",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSignin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SigninLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SigninLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSignupPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSignup"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SignupLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SignupLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthOauthPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthOauth"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "OauthLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "OauthLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthOauthDashcheckPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthOauthDashcheck"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "OauthCheckLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "OauthCheckLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodRequestDashpasswordDashresetPost": "<REDACTED>",
            "ApiGatewayMethodResetDashpasswordPost": "<REDACTED>",
            "ApiGatewayMethodCheckDashemailPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCheckDashemail"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CheckEmailLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CheckEmailLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserProfileGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserProfileLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserProfileLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserStatisticsDetailedGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsDetailed"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserStatisticsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserStatisticsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserStatisticsDailyGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsDaily"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserDailyStatsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserDailyStatsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserStatisticsWeeklyGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsWeekly"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserWeeklyStatsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserWeeklyStatsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserStatisticsMonthlyGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserStatisticsMonthly"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserMonthlyStatsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserMonthlyStatsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserSessionTrackPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserSessionTrack"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "TrackUserSessionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "TrackUserSessionLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserThemeAnalyticsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserThemeAnalytics"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserThemeAnalyticsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserThemeAnalyticsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserThemeDayGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserThemeDay"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserThemeDayStatsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserThemeDayStatsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserUpdateDashstatsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserUpdateDashstats"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserStatsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateUserStatsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserProfileDashimageDashuploadDashurlPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfileDashimageDashuploadDashurl"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetProfileImageUploadUrlLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetProfileImageUploadUrlLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserProfileDashimagePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfileDashimage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateProfileImageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateProfileImageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserProfileDashbackgroundGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfileDashbackground"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserProfileBackgroundLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUserProfileDashbackgroundPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserProfileDashbackground"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserProfileBackgroundLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodLeaderboardGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLeaderboard"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetLeaderboardLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetLeaderboardLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserMissionsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserMissions"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserMissionsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUserCompleteDashmissionPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserCompleteDashmission"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CompleteUserMissionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUserMissionsRewardsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserMissionsRewards"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "MissionRewardsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "MissionRewardsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodWordDefinitionGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceWordDefinition"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetWordDefinitionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetWordDefinitionLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodWordDashofDashtheDashdayGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceWordDashofDashtheDashday"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetWordOfTheDayLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetWordOfTheDayLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodFramesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFrames"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserFramesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserFramesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserSelectDashframePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserSelectDashframe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SelectUserFrameLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUserPurchaseDashframePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserPurchaseDashframe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PurchaseFrameLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUserPurchaseDashpremiumPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserPurchaseDashpremium"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PurchasePremiumLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUserVerifyDashsubscriptionPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserVerifyDashsubscription"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "VerifySubscriptionLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUserVerifyDashpurchasePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserVerifyDashpurchase"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "VerifyPurchaseLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBattlesInvitePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesInvite"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateBattleInvitationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBattlesInvitationsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesInvitations"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetBattleInvitationsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RespondToBattleInvitationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBattlesSubmitDashscorePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesSubmitDashscore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SubmitBattleScoreLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SubmitBattleScoreLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBattlesActiveGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesActive"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetActiveBattlesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBattlesHistoryGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesHistory"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetBattleHistoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBattlesScorePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesScore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateBattleScoreLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBattlesCompletePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBattlesComplete"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CompleteBattleLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAuthorizerPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthorizer"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizerLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserLoginDasheventPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserLoginDashevent"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LoginEventLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LoginEventLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSetDashwordDashofDashtheDashdayPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSetDashwordDashofDashtheDashday"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SetWordOfTheDayLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SetWordOfTheDayLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersSearchGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersSearch"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SearchUsersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SearchUsersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodDebugUserDashwordsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDebugUserDashwords"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DebugUserWordsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DebugUserWordsLambdaPermissionApiGateway"
              ]
            },
            "AuthorizerApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "IdentitySource": "method.request.header.Authorization",
                "Name": "authorizer",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "AuthorizerUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthorizerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "Type": "TOKEN"
              }
            },
            "ApiGatewayDeployment1758835758341": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodTestOptions",
                "ApiGatewayMethodSignupOptions",
                "ApiGatewayMethodAuthOauthOptions",
                "ApiGatewayMethodAuthOauthDashcheckOptions",
                "ApiGatewayMethodRequestDashpasswordDashresetOptions",
                "ApiGatewayMethodResetDashpasswordOptions",
                "ApiGatewayMethodCheckDashemailOptions",
                "ApiGatewayMethodUserProfileOptions",
                "ApiGatewayMethodUserStatisticsDetailedOptions",
                "ApiGatewayMethodUserStatisticsDailyOptions",
                "ApiGatewayMethodUserStatisticsWeeklyOptions",
                "ApiGatewayMethodUserStatisticsMonthlyOptions",
                "ApiGatewayMethodUserSessionTrackOptions",
                "ApiGatewayMethodUserThemeAnalyticsOptions",
                "ApiGatewayMethodUserThemeDayOptions",
                "ApiGatewayMethodUserUpdateDashstatsOptions",
                "ApiGatewayMethodUserProfileDashimageDashuploadDashurlOptions",
                "ApiGatewayMethodUserProfileDashimageOptions",
                "ApiGatewayMethodUserProfileDashbackgroundOptions",
                "ApiGatewayMethodLeaderboardOptions",
                "ApiGatewayMethodUserMissionsOptions",
                "ApiGatewayMethodUserCompleteDashmissionOptions",
                "ApiGatewayMethodUserMissionsRewardsOptions",
                "ApiGatewayMethodWordDefinitionOptions",
                "ApiGatewayMethodWordDashofDashtheDashdayOptions",
                "ApiGatewayMethodFramesOptions",
                "ApiGatewayMethodUserSelectDashframeOptions",
                "ApiGatewayMethodUserPurchaseDashframeOptions",
                "ApiGatewayMethodUserPurchaseDashpremiumOptions",
                "ApiGatewayMethodUserVerifyDashsubscriptionOptions",
                "ApiGatewayMethodUserVerifyDashpurchaseOptions",
                "ApiGatewayMethodBattlesInviteOptions",
                "ApiGatewayMethodBattlesInvitationsOptions",
                "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondOptions",
                "ApiGatewayMethodBattlesSubmitDashscoreOptions",
                "ApiGatewayMethodBattlesActiveOptions",
                "ApiGatewayMethodBattlesHistoryOptions",
                "ApiGatewayMethodBattlesScoreOptions",
                "ApiGatewayMethodBattlesCompleteOptions",
                "ApiGatewayMethodAuthorizerOptions",
                "ApiGatewayMethodUserLoginDasheventOptions",
                "ApiGatewayMethodSetDashwordDashofDashtheDashdayOptions",
                "ApiGatewayMethodUsersSearchOptions",
                "ApiGatewayMethodDebugUserDashwordsOptions",
                "ApiGatewayMethodTestGet",
                "ApiGatewayMethodSigninPost",
                "ApiGatewayMethodSigninOptions",
                "ApiGatewayMethodSignupPost",
                "ApiGatewayMethodAuthOauthPost",
                "ApiGatewayMethodAuthOauthDashcheckPost",
                "ApiGatewayMethodRequestDashpasswordDashresetPost",
                "ApiGatewayMethodResetDashpasswordPost",
                "ApiGatewayMethodCheckDashemailPost",
                "ApiGatewayMethodUserProfileGet",
                "ApiGatewayMethodUserStatisticsDetailedGet",
                "ApiGatewayMethodUserStatisticsDailyGet",
                "ApiGatewayMethodUserStatisticsWeeklyGet",
                "ApiGatewayMethodUserStatisticsMonthlyGet",
                "ApiGatewayMethodUserSessionTrackPost",
                "ApiGatewayMethodUserThemeAnalyticsGet",
                "ApiGatewayMethodUserThemeDayGet",
                "ApiGatewayMethodUserUpdateDashstatsPost",
                "ApiGatewayMethodUserProfileDashimageDashuploadDashurlPost",
                "ApiGatewayMethodUserProfileDashimagePost",
                "ApiGatewayMethodUserProfileDashbackgroundGet",
                "ApiGatewayMethodUserProfileDashbackgroundPost",
                "ApiGatewayMethodLeaderboardGet",
                "ApiGatewayMethodUserMissionsGet",
                "ApiGatewayMethodUserCompleteDashmissionPost",
                "ApiGatewayMethodUserMissionsRewardsPost",
                "ApiGatewayMethodWordDefinitionGet",
                "ApiGatewayMethodWordDashofDashtheDashdayGet",
                "ApiGatewayMethodFramesGet",
                "ApiGatewayMethodUserSelectDashframePost",
                "ApiGatewayMethodUserPurchaseDashframePost",
                "ApiGatewayMethodUserPurchaseDashpremiumPost",
                "ApiGatewayMethodUserVerifyDashsubscriptionPost",
                "ApiGatewayMethodUserVerifyDashpurchasePost",
                "ApiGatewayMethodBattlesInvitePost",
                "ApiGatewayMethodBattlesInvitationsGet",
                "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondPost",
                "ApiGatewayMethodBattlesSubmitDashscorePost",
                "ApiGatewayMethodBattlesActiveGet",
                "ApiGatewayMethodBattlesHistoryGet",
                "ApiGatewayMethodBattlesScorePost",
                "ApiGatewayMethodBattlesCompletePost",
                "ApiGatewayMethodAuthorizerPost",
                "ApiGatewayMethodUserLoginDasheventPost",
                "ApiGatewayMethodSetDashwordDashofDashtheDashdayPost",
                "ApiGatewayMethodUsersSearchGet",
                "ApiGatewayMethodDebugUserDashwordsGet"
              ]
            },
            "TestLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "TestLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SigninLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SigninLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SignupLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SignupLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "OauthLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "OauthLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "OauthCheckLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "OauthCheckLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "RequestPasswordResetLambdaPermissionApiGateway": "<REDACTED>",
            "ResetPasswordLambdaPermissionApiGateway": "<REDACTED>",
            "CheckEmailLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CheckEmailLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserProfileLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserStatisticsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserStatisticsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserDailyStatsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserDailyStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserWeeklyStatsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserWeeklyStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserMonthlyStatsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserMonthlyStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "TrackUserSessionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "TrackUserSessionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserThemeAnalyticsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserThemeAnalyticsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserThemeDayStatsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserThemeDayStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserStatsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetProfileImageUploadUrlLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetProfileImageUploadUrlLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateProfileImageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateProfileImageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserProfileBackgroundLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserProfileBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AuthorizerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserProfileBackgroundLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserProfileBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetLeaderboardLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetLeaderboardLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserMissionsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserMissionsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CompleteUserMissionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CompleteUserMissionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "MissionRewardsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "MissionRewardsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetWordDefinitionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetWordDefinitionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetWordOfTheDayLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetWordOfTheDayLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserFramesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserFramesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SelectUserFrameLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SelectUserFrameLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "PurchaseFrameLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PurchaseFrameLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "PurchasePremiumLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PurchasePremiumLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "VerifySubscriptionLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "VerifySubscriptionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "VerifyPurchaseLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "VerifyPurchaseLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateBattleInvitationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateBattleInvitationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetBattleInvitationsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetBattleInvitationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "RespondToBattleInvitationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RespondToBattleInvitationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SubmitBattleScoreLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SubmitBattleScoreLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetActiveBattlesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetActiveBattlesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetBattleHistoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetBattleHistoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateBattleScoreLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateBattleScoreLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CompleteBattleLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CompleteBattleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "LoginEventLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LoginEventLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SetWordOfTheDayLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SetWordOfTheDayLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SearchUsersLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SearchUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DebugUserWordsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DebugUserWordsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "DeletionPolicy": "Retain",
              "Properties": {
                "TableName": "wordflect-backend-users-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "username",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "email",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "UsernameIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "username",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "EmailIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "email",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "FramesTable": {
              "Type": "AWS::DynamoDB::Table",
              "DeletionPolicy": "Retain",
              "Properties": {
                "TableName": "wordflect-backend-frames-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "PasswordResetTokens": "<REDACTED>",
            "MissionsTable": {
              "Type": "AWS::DynamoDB::Table",
              "DeletionPolicy": "Retain",
              "Properties": {
                "TableName": "wordflect-backend-missions-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "WordOfTheDayTable": {
              "Type": "AWS::DynamoDB::Table",
              "DeletionPolicy": "Retain",
              "Properties": {
                "TableName": "wordflect-backend-word-of-the-day-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "date",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "date",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "BattlesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "wordflect-backend-battles-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "status",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "challengerId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "opponentId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "status-challenger-index",
                    "KeySchema": [
                      {
                        "AttributeName": "status",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "challengerId",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "status-opponent-index",
                    "KeySchema": [
                      {
                        "AttributeName": "status",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "opponentId",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "Export": {
                "Name": "sls-wordflect-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "TestLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "TestLambdaVersionTYfl025watCqC5Vz3Cw10VyKTZLQ2ZmLKi7P838NU"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-TestLambdaFunctionQualifiedArn"
              }
            },
            "SigninLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SigninLambdaVersionAOmV5SqgyilyIbWAXupWSnryrvVBlNFevq5dyGVgM"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-SigninLambdaFunctionQualifiedArn"
              }
            },
            "SignupLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SignupLambdaVersions1Ts4FeTOFaQm6XiOvY5h1ffRRTfcGwSEYHjXjE"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-SignupLambdaFunctionQualifiedArn"
              }
            },
            "OauthLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "OauthLambdaVersionwG5HIwqdakZmvNBMSjUafEpLl67IROt6oyYmuGJUgPM"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-OauthLambdaFunctionQualifiedArn"
              }
            },
            "ResetPasswordLambdaFunctionQualifiedArn": "<REDACTED>",
            "CheckEmailLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CheckEmailLambdaVersionn5BGnsKxN8Qyf8Lg0Auwj7Gl5T0RWnsucBpNP4H20A"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-CheckEmailLambdaFunctionQualifiedArn"
              }
            },
            "GetUserProfileLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserProfileLambdaVersionlpRk5rfK08mzfgV7QfIvroiQhDMNTLgLRqQbuzCqqY"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserProfileLambdaFunctionQualifiedArn"
              }
            },
            "GetUserDailyStatsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserDailyStatsLambdaVersionJQuSGFBLKHhZNx8rjsxI6JR5pzTwXYDlBZF2jbiXww"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserDailyStatsLambdaFunctionQualifiedArn"
              }
            },
            "GetUserWeeklyStatsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserWeeklyStatsLambdaVersionBCJVzWfasFDCSz4QicmuUclbGvdfGNCUDVkgb79rYs"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserWeeklyStatsLambdaFunctionQualifiedArn"
              }
            },
            "OauthCheckLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "OauthCheckLambdaVersionAs5hbRdDM4FDQZmWJ4qC2wzgPjT6pkBqD6fv6V514"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-OauthCheckLambdaFunctionQualifiedArn"
              }
            },
            "GetUserStatisticsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserStatisticsLambdaVersionxIGbedBdXwuGZRPh0JuLXCPAQXSYVml9gCgUhFA98"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserStatisticsLambdaFunctionQualifiedArn"
              }
            },
            "RequestPasswordResetLambdaFunctionQualifiedArn": "<REDACTED>",
            "GetUserMonthlyStatsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserMonthlyStatsLambdaVersionZeBAGoMUdfDzYx1PWdoUxyvk628hJc98fi26vJcFs"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserMonthlyStatsLambdaFunctionQualifiedArn"
              }
            },
            "TrackUserSessionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "TrackUserSessionLambdaVersionMEAuqFmJQoofpMTs1IzOvBVZHu9E6yk6F6Prf0eYc"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-TrackUserSessionLambdaFunctionQualifiedArn"
              }
            },
            "GetUserThemeDayStatsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserThemeDayStatsLambdaVersionmrX9uAKj5yWeAg4EbbgZtE0Qa5yutvMyUla9zVXHI"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserThemeDayStatsLambdaFunctionQualifiedArn"
              }
            },
            "GetProfileImageUploadUrlLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetProfileImageUploadUrlLambdaVersionDIqeWbAptfIO28kxHm6HOpnQgWOoOaqdpdV0cs34wNQ"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetProfileImageUploadUrlLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserStatsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserStatsLambdaVersionOdJyikUvjPMmu8bdBhHD6CYfCRpCQBYs5nGmvQMdgNI"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-UpdateUserStatsLambdaFunctionQualifiedArn"
              }
            },
            "GetUserThemeAnalyticsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserThemeAnalyticsLambdaVersionZpC3oWNLbN41cRYyhgMHAtDXCfnZVCYFHbWGVVMwQEI"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserThemeAnalyticsLambdaFunctionQualifiedArn"
              }
            },
            "UpdateProfileImageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateProfileImageLambdaVersionXlz4eQPATKmHSj9g4TM1fT26eBJKnQAz29KdKWwhdc"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-UpdateProfileImageLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserProfileBackgroundLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserProfileBackgroundLambdaVersionmhEpFxDx6ICIlcRvQVgCtPQjVC8YmHPZsJDsyw7qkgY"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-UpdateUserProfileBackgroundLambdaFunctionQualifiedArn"
              }
            },
            "GetUserProfileBackgroundLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserProfileBackgroundLambdaVersionZXiz6RU3g3ZKLsiBizGREkHTSyDMCATH0ctFr6DdSA"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserProfileBackgroundLambdaFunctionQualifiedArn"
              }
            },
            "GetLeaderboardLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetLeaderboardLambdaVersionMfXVt3Y1BEHyhRlhyhxqXNywVziJCyr1AHKDEc4io"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetLeaderboardLambdaFunctionQualifiedArn"
              }
            },
            "GetUserMissionsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserMissionsLambdaVersionDWbnHv2K137sxPt09bvauTZkQbGQHSGbdn4yFHnEA"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserMissionsLambdaFunctionQualifiedArn"
              }
            },
            "CompleteUserMissionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CompleteUserMissionLambdaVersionx36gsWs8GwF6ULatMOVnvipW9GOmyXFMTvoLydjU0E"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-CompleteUserMissionLambdaFunctionQualifiedArn"
              }
            },
            "MissionRewardsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "MissionRewardsLambdaVersionHEWJvvobcdAQWCMUZ5cB518hnn8CvX292MTIOvfcio"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-MissionRewardsLambdaFunctionQualifiedArn"
              }
            },
            "GetWordOfTheDayLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetWordOfTheDayLambdaVersionj6eIcf2mUX15dFqp8ReX0jYF5HXcIB70IJ3j7IrM"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetWordOfTheDayLambdaFunctionQualifiedArn"
              }
            },
            "GetUserFramesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserFramesLambdaVersionRGGnmox6U42zrjVVA1GEY0IaHiKVvpdb9LkS06FELl4"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetUserFramesLambdaFunctionQualifiedArn"
              }
            },
            "GetWordDefinitionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetWordDefinitionLambdaVersionOHh2fmrpnkQSlv8J1SHrfxbQ0xIccRcyAGpP53Btp0"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetWordDefinitionLambdaFunctionQualifiedArn"
              }
            },
            "SelectUserFrameLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SelectUserFrameLambdaVersionfBvTu9m2YHvlJsdVSDYSJ5gvUa4re2GJwXqF3Wxd8"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-SelectUserFrameLambdaFunctionQualifiedArn"
              }
            },
            "PurchasePremiumLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PurchasePremiumLambdaVersionHjtY3EYTj8fQXy420bn3WCb7Pz6ZFh1tO90HRh18"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-PurchasePremiumLambdaFunctionQualifiedArn"
              }
            },
            "PurchaseFrameLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PurchaseFrameLambdaVersionMCQO2VLB8RlR3bIqv0e6Vf0fenXdeCDS7OKCOAUBs"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-PurchaseFrameLambdaFunctionQualifiedArn"
              }
            },
            "VerifySubscriptionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "VerifySubscriptionLambdaVersioniSlqMUPZ0zvMrLEQJpCLE2nPAwgHBul7dUHIPlRLk"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-VerifySubscriptionLambdaFunctionQualifiedArn"
              }
            },
            "VerifyPurchaseLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "VerifyPurchaseLambdaVersion7RgMtBD0sHxAWQxIOuT5vzw9ghO3z9x47uYT4iTtdg"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-VerifyPurchaseLambdaFunctionQualifiedArn"
              }
            },
            "CreateBattleInvitationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateBattleInvitationLambdaVersionqOfZM8KbZd5qVqehzWk3XxlJn4FbxIEuJBECtcoqRzQ"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-CreateBattleInvitationLambdaFunctionQualifiedArn"
              }
            },
            "GetBattleInvitationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetBattleInvitationsLambdaVersiondTewCKX7zqyplhIEgwhYmP5xDBztHGZ0bZ4J7Uj3g"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetBattleInvitationsLambdaFunctionQualifiedArn"
              }
            },
            "RespondToBattleInvitationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RespondToBattleInvitationLambdaVersioninxp10clyZ4TOrUgUzJEqOLE77GK3LPnJP4zgjF1a6Y"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-RespondToBattleInvitationLambdaFunctionQualifiedArn"
              }
            },
            "SubmitBattleScoreLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SubmitBattleScoreLambdaVersionTv2XFcnLuiBiWZN2XKAKbMGn1t8YLO8A45C32OVKU"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-SubmitBattleScoreLambdaFunctionQualifiedArn"
              }
            },
            "GetActiveBattlesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetActiveBattlesLambdaVersionnln35JieEfadwa7xBnbW9vEJe70oOq0XfvgkKIP70A"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetActiveBattlesLambdaFunctionQualifiedArn"
              }
            },
            "GetBattleHistoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetBattleHistoryLambdaVersionyRszlz29L9CAQgJ8DmGgw5phBXdv7hupG0PEox5pNi4"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-GetBattleHistoryLambdaFunctionQualifiedArn"
              }
            },
            "UpdateBattleScoreLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateBattleScoreLambdaVersiony8d2PraFiSFZdOTMNU3ZiB3x1E1oToQpTLRXc9vK8"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-UpdateBattleScoreLambdaFunctionQualifiedArn"
              }
            },
            "CompleteBattleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CompleteBattleLambdaVersionD1Jm7HHMuGWMekzDnlM6j8mZCFVHRs3Ns0MFyUwQ"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-CompleteBattleLambdaFunctionQualifiedArn"
              }
            },
            "CleanupOldBattlesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CleanupOldBattlesLambdaVersionL5DRmZ08bj1NdHaXDoUx2jFDZsJWeXugIIYj83NpAo"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-CleanupOldBattlesLambdaFunctionQualifiedArn"
              }
            },
            "AuthorizerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AuthorizerLambdaVersionLtjGPoNOyP2AAkPJMms5pgJXMDFQ0ceXmobmCJICU"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-AuthorizerLambdaFunctionQualifiedArn"
              }
            },
            "ProcessLeaderboardLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ProcessLeaderboardLambdaVersionXizgJ6VKrdAYeCXPCvaX5u1JrM4xzAMAzpEhH0"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-ProcessLeaderboardLambdaFunctionQualifiedArn"
              }
            },
            "LoginEventLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LoginEventLambdaVersionX6I2uUZSt3zP0MIZWaaRSk3GVi4f6KCkpXY7v3o4g"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-LoginEventLambdaFunctionQualifiedArn"
              }
            },
            "SearchUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SearchUsersLambdaVersionzkx8pPQm7Gr6MpxnACNkimVSkcXWQ6cR73kl80nBb0"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-SearchUsersLambdaFunctionQualifiedArn"
              }
            },
            "SetWordOfTheDayLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SetWordOfTheDayLambdaVersionlVprrqPe9VQwgTJ6nH2mjBWo0PFMb4lgf30KwL8dwM"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-SetWordOfTheDayLambdaFunctionQualifiedArn"
              }
            },
            "DebugUserWordsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DebugUserWordsLambdaVersionIqoRQdN9WBqAGPgJNZRNBjjQhyYxtCC4lUkp8YHfMjs"
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-DebugUserWordsLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-wordflect-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "individually": true,
        "exclude": [
          ".git/**",
          ".vscode/**",
          ".DS_Store",
          "README.md",
          "docs/**",
          "test/**",
          "tests/**",
          "__tests__/**",
          "coverage/**",
          "node_modules/aws-sdk/**",
          "node_modules/.bin/**",
          "node_modules/typescript/**",
          "node_modules/@types/**",
          "node_modules/serverless/**",
          "node_modules/serverless-*/**",
          "node_modules/.cache/**",
          "scripts/**",
          "*.log",
          ".env",
          ".env.*",
          "backup_redundant_dirs/**",
          "venv/**",
          "*.py",
          "*.pyc",
          "*.sh",
          "*.md",
          "*.txt",
          "*.json.bak",
          "*.backup",
          "*.tmp",
          "*.temp",
          "versions_*.json",
          "all_*.txt",
          "all_*.json",
          "output.json",
          "response.json",
          "auth-check-email-*.json",
          "dkim-cname-changes.json",
          "dmarc-record.json",
          "mailfrom-records.json",
          "lambda_functions.json",
          "proposed_reward_structure.md",
          "temp-deploy/**",
          "minimal-deploy/**",
          "minimal-signin/**",
          "prod_deploy/**",
          "lambda-layer/**",
          "analyze_mission_rewards.js",
          "check-*.js",
          "debug*.js",
          "generate-jwt.js",
          "initialize*.js",
          "reset*.js",
          "test_*.js",
          "test_*.py",
          "test_*.sh"
        ],
        "artifactsS3KeyDirname": "serverless/wordflect-backend/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
        "artifactDirectoryName": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z"
      },
      "functions": {
        "test": {
          "handler": "src/handlers/testHandler.handler",
          "events": [
            {
              "http": {
                "path": "test",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-test",
          "package": {
            "artifact": ".serverless/test.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "TestLambdaVersionTYfl025watCqC5Vz3Cw10VyKTZLQ2ZmLKi7P838NU"
        },
        "signin": {
          "handler": "src/handlers/authSignin.handler",
          "events": [
            {
              "http": {
                "path": "signin",
                "method": "post",
                "cors": false,
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "signin",
                "method": "options",
                "cors": false,
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-signin",
          "package": {
            "artifact": ".serverless/signin.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SigninLambdaVersionAOmV5SqgyilyIbWAXupWSnryrvVBlNFevq5dyGVgM"
        },
        "signup": {
          "handler": "src/handlers/authSignup.handler",
          "events": [
            {
              "http": {
                "path": "signup",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-signup",
          "package": {
            "artifact": ".serverless/signup.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SignupLambdaVersions1Ts4FeTOFaQm6XiOvY5h1ffRRTfcGwSEYHjXjE"
        },
        "oauth": {
          "handler": "src/handlers/authOAuth.handler",
          "events": [
            {
              "http": {
                "path": "auth/oauth",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-oauth",
          "package": {
            "artifact": ".serverless/oauth.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "OauthLambdaVersionwG5HIwqdakZmvNBMSjUafEpLl67IROt6oyYmuGJUgPM"
        },
        "oauthCheck": {
          "handler": "src/handlers/authOAuthCheck.handler",
          "events": [
            {
              "http": {
                "path": "auth/oauth-check",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-oauthCheck",
          "package": {
            "artifact": ".serverless/oauthCheck.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "OauthCheckLambdaVersionAs5hbRdDM4FDQZmWJ4qC2wzgPjT6pkBqD6fv6V514"
        },
        "requestPasswordReset": "<REDACTED>",
        "resetPassword": "<REDACTED>",
        "checkEmail": {
          "handler": "src/handlers/checkEmail.handler",
          "events": [
            {
              "http": {
                "path": "check-email",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-checkEmail",
          "package": {
            "artifact": ".serverless/checkEmail.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CheckEmailLambdaVersionn5BGnsKxN8Qyf8Lg0Auwj7Gl5T0RWnsucBpNP4H20A"
        },
        "getUserProfile": {
          "handler": "src/handlers/getUserProfile.handler",
          "events": [
            {
              "http": {
                "path": "user/profile",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserProfile",
          "package": {
            "artifact": ".serverless/getUserProfile.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserProfileLambdaVersionlpRk5rfK08mzfgV7QfIvroiQhDMNTLgLRqQbuzCqqY"
        },
        "getUserStatistics": {
          "handler": "src/handlers/getUserStatistics.handler",
          "events": [
            {
              "http": {
                "path": "user/statistics/detailed",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserStatistics",
          "package": {
            "artifact": ".serverless/getUserStatistics.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserStatisticsLambdaVersionxIGbedBdXwuGZRPh0JuLXCPAQXSYVml9gCgUhFA98"
        },
        "getUserDailyStats": {
          "handler": "src/handlers/getUserDailyStats.handler",
          "events": [
            {
              "http": {
                "path": "user/statistics/daily",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserDailyStats",
          "package": {
            "artifact": ".serverless/getUserDailyStats.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserDailyStatsLambdaVersionJQuSGFBLKHhZNx8rjsxI6JR5pzTwXYDlBZF2jbiXww"
        },
        "getUserWeeklyStats": {
          "handler": "src/handlers/getUserWeeklyStats.handler",
          "events": [
            {
              "http": {
                "path": "user/statistics/weekly",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserWeeklyStats",
          "package": {
            "artifact": ".serverless/getUserWeeklyStats.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserWeeklyStatsLambdaVersionBCJVzWfasFDCSz4QicmuUclbGvdfGNCUDVkgb79rYs"
        },
        "getUserMonthlyStats": {
          "handler": "src/handlers/getUserMonthlyStats.handler",
          "events": [
            {
              "http": {
                "path": "user/statistics/monthly",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserMonthlyStats",
          "package": {
            "artifact": ".serverless/getUserMonthlyStats.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserMonthlyStatsLambdaVersionZeBAGoMUdfDzYx1PWdoUxyvk628hJc98fi26vJcFs"
        },
        "trackUserSession": {
          "handler": "src/handlers/trackUserSession.handler",
          "events": [
            {
              "http": {
                "path": "user/session/track",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-trackUserSession",
          "package": {
            "artifact": ".serverless/trackUserSession.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "TrackUserSessionLambdaVersionMEAuqFmJQoofpMTs1IzOvBVZHu9E6yk6F6Prf0eYc"
        },
        "getUserThemeAnalytics": {
          "handler": "src/handlers/getUserThemeAnalytics.handler",
          "events": [
            {
              "http": {
                "path": "user/theme/analytics",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserThemeAnalytics",
          "package": {
            "artifact": ".serverless/getUserThemeAnalytics.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserThemeAnalyticsLambdaVersionZpC3oWNLbN41cRYyhgMHAtDXCfnZVCYFHbWGVVMwQEI"
        },
        "getUserThemeDayStats": {
          "handler": "src/handlers/getUserThemeDayStats.handler",
          "events": [
            {
              "http": {
                "path": "user/theme/day",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserThemeDayStats",
          "package": {
            "artifact": ".serverless/getUserThemeDayStats.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserThemeDayStatsLambdaVersionmrX9uAKj5yWeAg4EbbgZtE0Qa5yutvMyUla9zVXHI"
        },
        "updateUserStats": {
          "handler": "src/handlers/updateUserStats.handler",
          "events": [
            {
              "http": {
                "path": "user/update-stats",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-updateUserStats",
          "package": {
            "artifact": ".serverless/updateUserStats.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserStatsLambdaVersionOdJyikUvjPMmu8bdBhHD6CYfCRpCQBYs5nGmvQMdgNI"
        },
        "getProfileImageUploadUrl": {
          "handler": "src/handlers/getProfileImageUploadUrl.handler",
          "events": [
            {
              "http": {
                "path": "user/profile-image-upload-url",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getProfileImageUploadUrl",
          "package": {
            "artifact": ".serverless/getProfileImageUploadUrl.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetProfileImageUploadUrlLambdaVersionDIqeWbAptfIO28kxHm6HOpnQgWOoOaqdpdV0cs34wNQ"
        },
        "updateProfileImage": {
          "handler": "src/handlers/updateProfileImage.handler",
          "events": [
            {
              "http": {
                "path": "user/profile-image",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-updateProfileImage",
          "package": {
            "artifact": ".serverless/updateProfileImage.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateProfileImageLambdaVersionXlz4eQPATKmHSj9g4TM1fT26eBJKnQAz29KdKWwhdc"
        },
        "getUserProfileBackground": {
          "handler": "src/handlers/getUserProfileBackground.handler",
          "events": [
            {
              "http": {
                "path": "user/profile-background",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserProfileBackground",
          "package": {
            "artifact": ".serverless/getUserProfileBackground.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserProfileBackgroundLambdaVersionZXiz6RU3g3ZKLsiBizGREkHTSyDMCATH0ctFr6DdSA"
        },
        "updateUserProfileBackground": {
          "handler": "src/handlers/updateUserProfileBackground.handler",
          "events": [
            {
              "http": {
                "path": "user/profile-background",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-updateUserProfileBackground",
          "package": {
            "artifact": ".serverless/updateUserProfileBackground.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserProfileBackgroundLambdaVersionmhEpFxDx6ICIlcRvQVgCtPQjVC8YmHPZsJDsyw7qkgY"
        },
        "getLeaderboard": {
          "handler": "src/handlers/getLeaderboard.handler",
          "events": [
            {
              "http": {
                "path": "leaderboard",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getLeaderboard",
          "package": {
            "artifact": ".serverless/getLeaderboard.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetLeaderboardLambdaVersionMfXVt3Y1BEHyhRlhyhxqXNywVziJCyr1AHKDEc4io"
        },
        "getUserMissions": {
          "handler": "src/handlers/getUserMissions.handler",
          "events": [
            {
              "http": {
                "path": "user/missions",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "environment": {
            "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
          },
          "name": "wordflect-backend-dev-getUserMissions",
          "package": {
            "artifact": ".serverless/getUserMissions.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserMissionsLambdaVersionDWbnHv2K137sxPt09bvauTZkQbGQHSGbdn4yFHnEA"
        },
        "completeUserMission": {
          "handler": "src/handlers/completeUserMission.handler",
          "events": [
            {
              "http": {
                "path": "user/complete-mission",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-completeUserMission",
          "package": {
            "artifact": ".serverless/completeUserMission.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CompleteUserMissionLambdaVersionx36gsWs8GwF6ULatMOVnvipW9GOmyXFMTvoLydjU0E"
        },
        "missionRewards": {
          "handler": "src/handlers/missionRewards.handler",
          "events": [
            {
              "http": {
                "path": "user/missions/rewards",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-missionRewards",
          "package": {
            "artifact": ".serverless/missionRewards.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "MissionRewardsLambdaVersionHEWJvvobcdAQWCMUZ5cB518hnn8CvX292MTIOvfcio"
        },
        "getWordDefinition": {
          "handler": "src/handlers/getWordDefinition.handler",
          "events": [
            {
              "http": {
                "path": "word/definition",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getWordDefinition",
          "package": {
            "artifact": ".serverless/getWordDefinition.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetWordDefinitionLambdaVersionOHh2fmrpnkQSlv8J1SHrfxbQ0xIccRcyAGpP53Btp0"
        },
        "getWordOfTheDay": {
          "handler": "src/handlers/getWordOfTheDay.handler",
          "events": [
            {
              "http": {
                "path": "word-of-the-day",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "environment": {
            "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
          },
          "name": "wordflect-backend-dev-getWordOfTheDay",
          "package": {
            "artifact": ".serverless/getWordOfTheDay.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetWordOfTheDayLambdaVersionj6eIcf2mUX15dFqp8ReX0jYF5HXcIB70IJ3j7IrM"
        },
        "getUserFrames": {
          "handler": "src/handlers/getUserFrames.handler",
          "events": [
            {
              "http": {
                "path": "frames",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getUserFrames",
          "package": {
            "artifact": ".serverless/getUserFrames.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserFramesLambdaVersionRGGnmox6U42zrjVVA1GEY0IaHiKVvpdb9LkS06FELl4"
        },
        "selectUserFrame": {
          "handler": "src/handlers/selectUserFrame.handler",
          "events": [
            {
              "http": {
                "path": "user/select-frame",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-selectUserFrame",
          "package": {
            "artifact": ".serverless/selectUserFrame.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SelectUserFrameLambdaVersionfBvTu9m2YHvlJsdVSDYSJ5gvUa4re2GJwXqF3Wxd8"
        },
        "purchaseFrame": {
          "handler": "src/handlers/purchaseFrame.handler",
          "events": [
            {
              "http": {
                "path": "user/purchase-frame",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-purchaseFrame",
          "package": {
            "artifact": ".serverless/purchaseFrame.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PurchaseFrameLambdaVersionMCQO2VLB8RlR3bIqv0e6Vf0fenXdeCDS7OKCOAUBs"
        },
        "purchasePremium": {
          "handler": "src/handlers/purchasePremium.handler",
          "events": [
            {
              "http": {
                "path": "user/purchase-premium",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-purchasePremium",
          "package": {
            "artifact": ".serverless/purchasePremium.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PurchasePremiumLambdaVersionHjtY3EYTj8fQXy420bn3WCb7Pz6ZFh1tO90HRh18"
        },
        "verifySubscription": {
          "handler": "src/handlers/verifySubscription.handler",
          "events": [
            {
              "http": {
                "path": "user/verify-subscription",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-verifySubscription",
          "package": {
            "artifact": ".serverless/verifySubscription.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "VerifySubscriptionLambdaVersioniSlqMUPZ0zvMrLEQJpCLE2nPAwgHBul7dUHIPlRLk"
        },
        "verifyPurchase": {
          "handler": "src/handlers/verifyPurchase.handler",
          "events": [
            {
              "http": {
                "path": "user/verify-purchase",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-verifyPurchase",
          "package": {
            "artifact": ".serverless/verifyPurchase.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "VerifyPurchaseLambdaVersion7RgMtBD0sHxAWQxIOuT5vzw9ghO3z9x47uYT4iTtdg"
        },
        "createBattleInvitation": {
          "handler": "src/handlers/createBattleInvitation.handler",
          "events": [
            {
              "http": {
                "path": "battles/invite",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-createBattleInvitation",
          "package": {
            "artifact": ".serverless/createBattleInvitation.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateBattleInvitationLambdaVersionqOfZM8KbZd5qVqehzWk3XxlJn4FbxIEuJBECtcoqRzQ"
        },
        "getBattleInvitations": {
          "handler": "src/handlers/getBattleInvitations.handler",
          "events": [
            {
              "http": {
                "path": "battles/invitations",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getBattleInvitations",
          "package": {
            "artifact": ".serverless/getBattleInvitations.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetBattleInvitationsLambdaVersiondTewCKX7zqyplhIEgwhYmP5xDBztHGZ0bZ4J7Uj3g"
        },
        "respondToBattleInvitation": {
          "handler": "src/handlers/respondToBattleInvitation.handler",
          "events": [
            {
              "http": {
                "path": "battles/invitations/{invitationId}/respond",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-respondToBattleInvitation",
          "package": {
            "artifact": ".serverless/respondToBattleInvitation.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "RespondToBattleInvitationLambdaVersioninxp10clyZ4TOrUgUzJEqOLE77GK3LPnJP4zgjF1a6Y"
        },
        "submitBattleScore": {
          "handler": "src/handlers/submitBattleScore.handler",
          "events": [
            {
              "http": {
                "path": "battles/submit-score",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-submitBattleScore",
          "package": {
            "artifact": ".serverless/submitBattleScore.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SubmitBattleScoreLambdaVersionTv2XFcnLuiBiWZN2XKAKbMGn1t8YLO8A45C32OVKU"
        },
        "getActiveBattles": {
          "handler": "src/handlers/getActiveBattles.handler",
          "events": [
            {
              "http": {
                "path": "battles/active",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getActiveBattles",
          "package": {
            "artifact": ".serverless/getActiveBattles.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetActiveBattlesLambdaVersionnln35JieEfadwa7xBnbW9vEJe70oOq0XfvgkKIP70A"
        },
        "getBattleHistory": {
          "handler": "src/handlers/getBattleHistory.handler",
          "events": [
            {
              "http": {
                "path": "battles/history",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-getBattleHistory",
          "package": {
            "artifact": ".serverless/getBattleHistory.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetBattleHistoryLambdaVersionyRszlz29L9CAQgJ8DmGgw5phBXdv7hupG0PEox5pNi4"
        },
        "updateBattleScore": {
          "handler": "src/handlers/updateBattleScore.handler",
          "events": [
            {
              "http": {
                "path": "battles/score",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-updateBattleScore",
          "package": {
            "artifact": ".serverless/updateBattleScore.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateBattleScoreLambdaVersiony8d2PraFiSFZdOTMNU3ZiB3x1E1oToQpTLRXc9vK8"
        },
        "completeBattle": {
          "handler": "src/handlers/completeBattle.handler",
          "events": [
            {
              "http": {
                "path": "battles/complete",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "name": "authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-completeBattle",
          "package": {
            "artifact": ".serverless/completeBattle.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CompleteBattleLambdaVersionD1Jm7HHMuGWMekzDnlM6j8mZCFVHRs3Ns0MFyUwQ"
        },
        "cleanupOldBattles": {
          "handler": "src/handlers/cleanupOldBattles.handler",
          "events": [
            {
              "schedule": "cron(0 3 * * ? *)"
            }
          ],
          "name": "wordflect-backend-dev-cleanupOldBattles",
          "package": {
            "artifact": ".serverless/cleanupOldBattles.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CleanupOldBattlesLambdaVersionL5DRmZ08bj1NdHaXDoUx2jFDZsJWeXugIIYj83NpAo"
        },
        "authorizer": {
          "handler": "src/handlers/authorizer.handler",
          "events": [
            {
              "http": {
                "path": "authorizer",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-authorizer",
          "package": {
            "artifact": ".serverless/authorizer.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AuthorizerLambdaVersionLtjGPoNOyP2AAkPJMms5pgJXMDFQ0ceXmobmCJICU"
        },
        "processLeaderboard": {
          "handler": "src/handlers/processLeaderboard.handler",
          "events": [
            {
              "schedule": "cron(0 2 1 * ? *)"
            }
          ],
          "name": "wordflect-backend-dev-processLeaderboard",
          "package": {
            "artifact": ".serverless/processLeaderboard.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ProcessLeaderboardLambdaVersionXizgJ6VKrdAYeCXPCvaX5u1JrM4xzAMAzpEhH0"
        },
        "loginEvent": {
          "handler": "src/handlers/loginEvent.handler",
          "events": [
            {
              "http": {
                "path": "user/login-event",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-loginEvent",
          "package": {
            "artifact": ".serverless/loginEvent.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "LoginEventLambdaVersionX6I2uUZSt3zP0MIZWaaRSk3GVi4f6KCkpXY7v3o4g"
        },
        "setWordOfTheDay": {
          "handler": "src/handlers/setWordOfTheDay.handler",
          "events": [
            {
              "schedule": "cron(0 0 * * ? *)"
            },
            {
              "http": {
                "path": "set-word-of-the-day",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "environment": {
            "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
          },
          "name": "wordflect-backend-dev-setWordOfTheDay",
          "package": {
            "artifact": ".serverless/setWordOfTheDay.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SetWordOfTheDayLambdaVersionlVprrqPe9VQwgTJ6nH2mjBWo0PFMb4lgf30KwL8dwM"
        },
        "searchUsers": {
          "handler": "src/handlers/searchUsers.handler",
          "events": [
            {
              "http": {
                "path": "users/search",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-searchUsers",
          "package": {
            "artifact": ".serverless/searchUsers.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SearchUsersLambdaVersionzkx8pPQm7Gr6MpxnACNkimVSkcXWQ6cR73kl80nBb0"
        },
        "debugUserWords": {
          "handler": "src/handlers/debugUserWords.handler",
          "events": [
            {
              "http": {
                "path": "debug/user-words",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "wordflect-backend-dev-debugUserWords",
          "package": {
            "artifact": ".serverless/debugUserWords.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DebugUserWordsLambdaVersionIqoRQdN9WBqAGPgJNZRNBjjQhyYxtCC4lUkp8YHfMjs"
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-users-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UsernameIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "EmailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "FramesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-frames-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "PasswordResetTokens": "<REDACTED>",
          "MissionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-missions-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WordOfTheDayTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-word-of-the-day-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "date",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "BattlesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "wordflect-backend-battles-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "challengerId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "opponentId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "status-challenger-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "challengerId",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "status-opponent-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "opponentId",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "stage": "dev",
      "region": "us-east-2",
      "environment": {
        "USERS_TABLE": "wordflect-backend-users-dev",
        "MISSIONS_TABLE": "wordflect-backend-missions-dev",
        "FRAMES_TABLE": "wordflect-backend-frames-dev",
        "BATTLES_TABLE": "wordflect-backend-battles-dev",
        "JWT_SECRET": "<REDACTED>",
        "PASSWORD_RESET_TABLE": "<REDACTED>",
        "SES_FROM_EMAIL": "noreply@wordflect.com",
        "WORDNIK_API_KEY": "<REDACTED>"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:DeleteItem",
            "dynamodb:UpdateItem",
            "ses:SendEmail",
            "ses:SendRawEmail",
            "s3:PutObject",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObjectAcl",
            "dynamodb:Scan"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev",
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev/index/*",
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-missions-dev",
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-frames-dev",
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev",
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev/index/*",
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-password-reset-tokens-dev",
            "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-word-of-the-day-dev",
            "arn:aws:dynamodb:us-east-2:*:table/WordOfTheDay",
            "arn:aws:ses:us-east-2:*:identity/wordflect.com",
            "arn:aws:ses:us-east-2:*:identity/supergeek@me.com",
            "arn:aws:ses:us-east-2:*:identity/*",
            "arn:aws:s3:::wordflect-profile-images",
            "arn:aws:s3:::wordflect-profile-images/*",
            "arn:aws:s3:::wordflect-profile-images/profile-images/*",
            "arn:aws:s3:::wordflect-profile-images/profile-images/*/*"
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "TestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-test"
            }
          },
          "SigninLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-signin"
            }
          },
          "SignupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-signup"
            }
          },
          "OauthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-oauth"
            }
          },
          "OauthCheckLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-oauthCheck"
            }
          },
          "RequestPasswordResetLogGroup": "<REDACTED>",
          "ResetPasswordLogGroup": "<REDACTED>",
          "CheckEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-checkEmail"
            }
          },
          "GetUserProfileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserProfile"
            }
          },
          "GetUserStatisticsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserStatistics"
            }
          },
          "GetUserDailyStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserDailyStats"
            }
          },
          "GetUserWeeklyStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserWeeklyStats"
            }
          },
          "GetUserMonthlyStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserMonthlyStats"
            }
          },
          "TrackUserSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-trackUserSession"
            }
          },
          "GetUserThemeAnalyticsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserThemeAnalytics"
            }
          },
          "GetUserThemeDayStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserThemeDayStats"
            }
          },
          "UpdateUserStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateUserStats"
            }
          },
          "GetProfileImageUploadUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getProfileImageUploadUrl"
            }
          },
          "UpdateProfileImageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateProfileImage"
            }
          },
          "GetUserProfileBackgroundLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserProfileBackground"
            }
          },
          "UpdateUserProfileBackgroundLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateUserProfileBackground"
            }
          },
          "GetLeaderboardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getLeaderboard"
            }
          },
          "GetUserMissionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserMissions"
            }
          },
          "CompleteUserMissionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-completeUserMission"
            }
          },
          "MissionRewardsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-missionRewards"
            }
          },
          "GetWordDefinitionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getWordDefinition"
            }
          },
          "GetWordOfTheDayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getWordOfTheDay"
            }
          },
          "GetUserFramesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserFrames"
            }
          },
          "SelectUserFrameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-selectUserFrame"
            }
          },
          "PurchaseFrameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-purchaseFrame"
            }
          },
          "PurchasePremiumLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-purchasePremium"
            }
          },
          "VerifySubscriptionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-verifySubscription"
            }
          },
          "VerifyPurchaseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-verifyPurchase"
            }
          },
          "CreateBattleInvitationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-createBattleInvitation"
            }
          },
          "GetBattleInvitationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getBattleInvitations"
            }
          },
          "RespondToBattleInvitationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-respondToBattleInvitation"
            }
          },
          "SubmitBattleScoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-submitBattleScore"
            }
          },
          "GetActiveBattlesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getActiveBattles"
            }
          },
          "GetBattleHistoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-getBattleHistory"
            }
          },
          "UpdateBattleScoreLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateBattleScore"
            }
          },
          "CompleteBattleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-completeBattle"
            }
          },
          "CleanupOldBattlesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-cleanupOldBattles"
            }
          },
          "AuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-authorizer"
            }
          },
          "ProcessLeaderboardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-processLeaderboard"
            }
          },
          "LoginEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-loginEvent"
            }
          },
          "SetWordOfTheDayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-setWordOfTheDay"
            }
          },
          "SearchUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-searchUsers"
            }
          },
          "DebugUserWordsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wordflect-backend-dev-debugUserWords"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "wordflect-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wordflect-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wordflect-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:DeleteItem",
                          "dynamodb:UpdateItem",
                          "ses:SendEmail",
                          "ses:SendRawEmail",
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:ListBucket",
                          "s3:PutObjectAcl",
                          "dynamodb:Scan"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev",
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev/index/*",
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-missions-dev",
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-frames-dev",
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev",
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev/index/*",
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-password-reset-tokens-dev",
                          "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-word-of-the-day-dev",
                          "arn:aws:dynamodb:us-east-2:*:table/WordOfTheDay",
                          "arn:aws:ses:us-east-2:*:identity/wordflect.com",
                          "arn:aws:ses:us-east-2:*:identity/supergeek@me.com",
                          "arn:aws:ses:us-east-2:*:identity/*",
                          "arn:aws:s3:::wordflect-profile-images",
                          "arn:aws:s3:::wordflect-profile-images/*",
                          "arn:aws:s3:::wordflect-profile-images/profile-images/*",
                          "arn:aws:s3:::wordflect-profile-images/profile-images/*/*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "wordflect-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "TestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/test.zip"
              },
              "Handler": "src/handlers/testHandler.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-test",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TestLogGroup"
            ]
          },
          "SigninLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/signin.zip"
              },
              "Handler": "src/handlers/authSignin.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-signin",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SigninLogGroup"
            ]
          },
          "SignupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/signup.zip"
              },
              "Handler": "src/handlers/authSignup.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-signup",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignupLogGroup"
            ]
          },
          "OauthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/oauth.zip"
              },
              "Handler": "src/handlers/authOAuth.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-oauth",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OauthLogGroup"
            ]
          },
          "OauthCheckLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/oauthCheck.zip"
              },
              "Handler": "src/handlers/authOAuthCheck.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-oauthCheck",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OauthCheckLogGroup"
            ]
          },
          "RequestPasswordResetLambdaFunction": "<REDACTED>",
          "ResetPasswordLambdaFunction": "<REDACTED>",
          "CheckEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/checkEmail.zip"
              },
              "Handler": "src/handlers/checkEmail.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-checkEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckEmailLogGroup"
            ]
          },
          "GetUserProfileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserProfile.zip"
              },
              "Handler": "src/handlers/getUserProfile.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserProfile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserProfileLogGroup"
            ]
          },
          "GetUserStatisticsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserStatistics.zip"
              },
              "Handler": "src/handlers/getUserStatistics.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserStatistics",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserStatisticsLogGroup"
            ]
          },
          "GetUserDailyStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserDailyStats.zip"
              },
              "Handler": "src/handlers/getUserDailyStats.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserDailyStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserDailyStatsLogGroup"
            ]
          },
          "GetUserWeeklyStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserWeeklyStats.zip"
              },
              "Handler": "src/handlers/getUserWeeklyStats.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserWeeklyStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserWeeklyStatsLogGroup"
            ]
          },
          "GetUserMonthlyStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserMonthlyStats.zip"
              },
              "Handler": "src/handlers/getUserMonthlyStats.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserMonthlyStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserMonthlyStatsLogGroup"
            ]
          },
          "TrackUserSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/trackUserSession.zip"
              },
              "Handler": "src/handlers/trackUserSession.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-trackUserSession",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TrackUserSessionLogGroup"
            ]
          },
          "GetUserThemeAnalyticsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserThemeAnalytics.zip"
              },
              "Handler": "src/handlers/getUserThemeAnalytics.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserThemeAnalytics",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserThemeAnalyticsLogGroup"
            ]
          },
          "GetUserThemeDayStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserThemeDayStats.zip"
              },
              "Handler": "src/handlers/getUserThemeDayStats.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserThemeDayStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserThemeDayStatsLogGroup"
            ]
          },
          "UpdateUserStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateUserStats.zip"
              },
              "Handler": "src/handlers/updateUserStats.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-updateUserStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserStatsLogGroup"
            ]
          },
          "GetProfileImageUploadUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getProfileImageUploadUrl.zip"
              },
              "Handler": "src/handlers/getProfileImageUploadUrl.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getProfileImageUploadUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProfileImageUploadUrlLogGroup"
            ]
          },
          "UpdateProfileImageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateProfileImage.zip"
              },
              "Handler": "src/handlers/updateProfileImage.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-updateProfileImage",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProfileImageLogGroup"
            ]
          },
          "GetUserProfileBackgroundLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserProfileBackground.zip"
              },
              "Handler": "src/handlers/getUserProfileBackground.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserProfileBackground",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserProfileBackgroundLogGroup"
            ]
          },
          "UpdateUserProfileBackgroundLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateUserProfileBackground.zip"
              },
              "Handler": "src/handlers/updateUserProfileBackground.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-updateUserProfileBackground",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserProfileBackgroundLogGroup"
            ]
          },
          "GetLeaderboardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getLeaderboard.zip"
              },
              "Handler": "src/handlers/getLeaderboard.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getLeaderboard",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLeaderboardLogGroup"
            ]
          },
          "GetUserMissionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserMissions.zip"
              },
              "Handler": "src/handlers/getUserMissions.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserMissions",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>",
                  "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserMissionsLogGroup"
            ]
          },
          "CompleteUserMissionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/completeUserMission.zip"
              },
              "Handler": "src/handlers/completeUserMission.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-completeUserMission",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CompleteUserMissionLogGroup"
            ]
          },
          "MissionRewardsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/missionRewards.zip"
              },
              "Handler": "src/handlers/missionRewards.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-missionRewards",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MissionRewardsLogGroup"
            ]
          },
          "GetWordDefinitionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getWordDefinition.zip"
              },
              "Handler": "src/handlers/getWordDefinition.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getWordDefinition",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetWordDefinitionLogGroup"
            ]
          },
          "GetWordOfTheDayLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getWordOfTheDay.zip"
              },
              "Handler": "src/handlers/getWordOfTheDay.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getWordOfTheDay",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>",
                  "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetWordOfTheDayLogGroup"
            ]
          },
          "GetUserFramesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserFrames.zip"
              },
              "Handler": "src/handlers/getUserFrames.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getUserFrames",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserFramesLogGroup"
            ]
          },
          "SelectUserFrameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/selectUserFrame.zip"
              },
              "Handler": "src/handlers/selectUserFrame.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-selectUserFrame",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SelectUserFrameLogGroup"
            ]
          },
          "PurchaseFrameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/purchaseFrame.zip"
              },
              "Handler": "src/handlers/purchaseFrame.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-purchaseFrame",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PurchaseFrameLogGroup"
            ]
          },
          "PurchasePremiumLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/purchasePremium.zip"
              },
              "Handler": "src/handlers/purchasePremium.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-purchasePremium",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PurchasePremiumLogGroup"
            ]
          },
          "VerifySubscriptionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/verifySubscription.zip"
              },
              "Handler": "src/handlers/verifySubscription.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-verifySubscription",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifySubscriptionLogGroup"
            ]
          },
          "VerifyPurchaseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/verifyPurchase.zip"
              },
              "Handler": "src/handlers/verifyPurchase.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-verifyPurchase",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyPurchaseLogGroup"
            ]
          },
          "CreateBattleInvitationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/createBattleInvitation.zip"
              },
              "Handler": "src/handlers/createBattleInvitation.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-createBattleInvitation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateBattleInvitationLogGroup"
            ]
          },
          "GetBattleInvitationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getBattleInvitations.zip"
              },
              "Handler": "src/handlers/getBattleInvitations.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getBattleInvitations",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetBattleInvitationsLogGroup"
            ]
          },
          "RespondToBattleInvitationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/respondToBattleInvitation.zip"
              },
              "Handler": "src/handlers/respondToBattleInvitation.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-respondToBattleInvitation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RespondToBattleInvitationLogGroup"
            ]
          },
          "SubmitBattleScoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/submitBattleScore.zip"
              },
              "Handler": "src/handlers/submitBattleScore.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-submitBattleScore",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitBattleScoreLogGroup"
            ]
          },
          "GetActiveBattlesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getActiveBattles.zip"
              },
              "Handler": "src/handlers/getActiveBattles.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getActiveBattles",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetActiveBattlesLogGroup"
            ]
          },
          "GetBattleHistoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getBattleHistory.zip"
              },
              "Handler": "src/handlers/getBattleHistory.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-getBattleHistory",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetBattleHistoryLogGroup"
            ]
          },
          "UpdateBattleScoreLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateBattleScore.zip"
              },
              "Handler": "src/handlers/updateBattleScore.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-updateBattleScore",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateBattleScoreLogGroup"
            ]
          },
          "CompleteBattleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/completeBattle.zip"
              },
              "Handler": "src/handlers/completeBattle.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-completeBattle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CompleteBattleLogGroup"
            ]
          },
          "CleanupOldBattlesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/cleanupOldBattles.zip"
              },
              "Handler": "src/handlers/cleanupOldBattles.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-cleanupOldBattles",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CleanupOldBattlesLogGroup"
            ]
          },
          "AuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/authorizer.zip"
              },
              "Handler": "src/handlers/authorizer.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-authorizer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthorizerLogGroup"
            ]
          },
          "ProcessLeaderboardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/processLeaderboard.zip"
              },
              "Handler": "src/handlers/processLeaderboard.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-processLeaderboard",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProcessLeaderboardLogGroup"
            ]
          },
          "LoginEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/loginEvent.zip"
              },
              "Handler": "src/handlers/loginEvent.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-loginEvent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginEventLogGroup"
            ]
          },
          "SetWordOfTheDayLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/setWordOfTheDay.zip"
              },
              "Handler": "src/handlers/setWordOfTheDay.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-setWordOfTheDay",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>",
                  "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SetWordOfTheDayLogGroup"
            ]
          },
          "SearchUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/searchUsers.zip"
              },
              "Handler": "src/handlers/searchUsers.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-searchUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SearchUsersLogGroup"
            ]
          },
          "DebugUserWordsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
                "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/debugUserWords.zip"
              },
              "Handler": "src/handlers/debugUserWords.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "wordflect-backend-dev-debugUserWords",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "wordflect-backend-users-dev",
                  "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                  "FRAMES_TABLE": "wordflect-backend-frames-dev",
                  "BATTLES_TABLE": "wordflect-backend-battles-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "PASSWORD_RESET_TABLE": "<REDACTED>",
                  "SES_FROM_EMAIL": "noreply@wordflect.com",
                  "WORDNIK_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DebugUserWordsLogGroup"
            ]
          },
          "TestLambdaVersionTYfl025watCqC5Vz3Cw10VyKTZLQ2ZmLKi7P838NU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TestLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "SigninLambdaVersionAOmV5SqgyilyIbWAXupWSnryrvVBlNFevq5dyGVgM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SigninLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "SignupLambdaVersions1Ts4FeTOFaQm6XiOvY5h1ffRRTfcGwSEYHjXjE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignupLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "OauthLambdaVersionwG5HIwqdakZmvNBMSjUafEpLl67IROt6oyYmuGJUgPM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OauthLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "ResetPasswordLambdaVersionTzULEnBvPZtpjLXW6M8jMYzdLj3RwP8Jxcb4yJPcpY": "<REDACTED>",
          "CheckEmailLambdaVersionn5BGnsKxN8Qyf8Lg0Auwj7Gl5T0RWnsucBpNP4H20A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckEmailLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserProfileLambdaVersionlpRk5rfK08mzfgV7QfIvroiQhDMNTLgLRqQbuzCqqY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserProfileLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserDailyStatsLambdaVersionJQuSGFBLKHhZNx8rjsxI6JR5pzTwXYDlBZF2jbiXww": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserDailyStatsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserWeeklyStatsLambdaVersionBCJVzWfasFDCSz4QicmuUclbGvdfGNCUDVkgb79rYs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserWeeklyStatsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "OauthCheckLambdaVersionAs5hbRdDM4FDQZmWJ4qC2wzgPjT6pkBqD6fv6V514": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OauthCheckLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserStatisticsLambdaVersionxIGbedBdXwuGZRPh0JuLXCPAQXSYVml9gCgUhFA98": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserStatisticsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "RequestPasswordResetLambdaVersionGe5MUty04QwAu6zih10hKEHb0hwMe8xzbkSvAPqtlFg": "<REDACTED>",
          "GetUserMonthlyStatsLambdaVersionZeBAGoMUdfDzYx1PWdoUxyvk628hJc98fi26vJcFs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserMonthlyStatsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "TrackUserSessionLambdaVersionMEAuqFmJQoofpMTs1IzOvBVZHu9E6yk6F6Prf0eYc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TrackUserSessionLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserThemeDayStatsLambdaVersionmrX9uAKj5yWeAg4EbbgZtE0Qa5yutvMyUla9zVXHI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserThemeDayStatsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetProfileImageUploadUrlLambdaVersionDIqeWbAptfIO28kxHm6HOpnQgWOoOaqdpdV0cs34wNQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProfileImageUploadUrlLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "UpdateUserStatsLambdaVersionOdJyikUvjPMmu8bdBhHD6CYfCRpCQBYs5nGmvQMdgNI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserStatsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserThemeAnalyticsLambdaVersionZpC3oWNLbN41cRYyhgMHAtDXCfnZVCYFHbWGVVMwQEI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserThemeAnalyticsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "UpdateProfileImageLambdaVersionXlz4eQPATKmHSj9g4TM1fT26eBJKnQAz29KdKWwhdc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProfileImageLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "UpdateUserProfileBackgroundLambdaVersionmhEpFxDx6ICIlcRvQVgCtPQjVC8YmHPZsJDsyw7qkgY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserProfileBackgroundLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserProfileBackgroundLambdaVersionZXiz6RU3g3ZKLsiBizGREkHTSyDMCATH0ctFr6DdSA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserProfileBackgroundLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetLeaderboardLambdaVersionMfXVt3Y1BEHyhRlhyhxqXNywVziJCyr1AHKDEc4io": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLeaderboardLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserMissionsLambdaVersionDWbnHv2K137sxPt09bvauTZkQbGQHSGbdn4yFHnEA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserMissionsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "CompleteUserMissionLambdaVersionx36gsWs8GwF6ULatMOVnvipW9GOmyXFMTvoLydjU0E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CompleteUserMissionLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "MissionRewardsLambdaVersionHEWJvvobcdAQWCMUZ5cB518hnn8CvX292MTIOvfcio": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MissionRewardsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetWordOfTheDayLambdaVersionj6eIcf2mUX15dFqp8ReX0jYF5HXcIB70IJ3j7IrM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetWordOfTheDayLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetUserFramesLambdaVersionRGGnmox6U42zrjVVA1GEY0IaHiKVvpdb9LkS06FELl4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserFramesLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetWordDefinitionLambdaVersionOHh2fmrpnkQSlv8J1SHrfxbQ0xIccRcyAGpP53Btp0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetWordDefinitionLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "SelectUserFrameLambdaVersionfBvTu9m2YHvlJsdVSDYSJ5gvUa4re2GJwXqF3Wxd8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SelectUserFrameLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "PurchasePremiumLambdaVersionHjtY3EYTj8fQXy420bn3WCb7Pz6ZFh1tO90HRh18": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PurchasePremiumLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "PurchaseFrameLambdaVersionMCQO2VLB8RlR3bIqv0e6Vf0fenXdeCDS7OKCOAUBs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PurchaseFrameLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "VerifySubscriptionLambdaVersioniSlqMUPZ0zvMrLEQJpCLE2nPAwgHBul7dUHIPlRLk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifySubscriptionLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "VerifyPurchaseLambdaVersion7RgMtBD0sHxAWQxIOuT5vzw9ghO3z9x47uYT4iTtdg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyPurchaseLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "CreateBattleInvitationLambdaVersionqOfZM8KbZd5qVqehzWk3XxlJn4FbxIEuJBECtcoqRzQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBattleInvitationLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetBattleInvitationsLambdaVersiondTewCKX7zqyplhIEgwhYmP5xDBztHGZ0bZ4J7Uj3g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBattleInvitationsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "RespondToBattleInvitationLambdaVersioninxp10clyZ4TOrUgUzJEqOLE77GK3LPnJP4zgjF1a6Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RespondToBattleInvitationLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "SubmitBattleScoreLambdaVersionTv2XFcnLuiBiWZN2XKAKbMGn1t8YLO8A45C32OVKU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitBattleScoreLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetActiveBattlesLambdaVersionnln35JieEfadwa7xBnbW9vEJe70oOq0XfvgkKIP70A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetActiveBattlesLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "GetBattleHistoryLambdaVersionyRszlz29L9CAQgJ8DmGgw5phBXdv7hupG0PEox5pNi4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBattleHistoryLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "UpdateBattleScoreLambdaVersiony8d2PraFiSFZdOTMNU3ZiB3x1E1oToQpTLRXc9vK8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateBattleScoreLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "CompleteBattleLambdaVersionD1Jm7HHMuGWMekzDnlM6j8mZCFVHRs3Ns0MFyUwQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CompleteBattleLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "CleanupOldBattlesLambdaVersionL5DRmZ08bj1NdHaXDoUx2jFDZsJWeXugIIYj83NpAo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CleanupOldBattlesLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "AuthorizerLambdaVersionLtjGPoNOyP2AAkPJMms5pgJXMDFQ0ceXmobmCJICU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizerLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "ProcessLeaderboardLambdaVersionXizgJ6VKrdAYeCXPCvaX5u1JrM4xzAMAzpEhH0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessLeaderboardLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "LoginEventLambdaVersionX6I2uUZSt3zP0MIZWaaRSk3GVi4f6KCkpXY7v3o4g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginEventLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "SearchUsersLambdaVersionzkx8pPQm7Gr6MpxnACNkimVSkcXWQ6cR73kl80nBb0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SearchUsersLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "SetWordOfTheDayLambdaVersionlVprrqPe9VQwgTJ6nH2mjBWo0PFMb4lgf30KwL8dwM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SetWordOfTheDayLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "DebugUserWordsLambdaVersionIqoRQdN9WBqAGPgJNZRNBjjQhyYxtCC4lUkp8YHfMjs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DebugUserWordsLambdaFunction"
              },
              "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
            }
          },
          "CleanupOldBattlesEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 3 * * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "CleanupOldBattlesLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "cleanupOldBattlesSchedule"
                }
              ]
            }
          },
          "CleanupOldBattlesLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CleanupOldBattlesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CleanupOldBattlesEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ProcessLeaderboardEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 2 1 * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "ProcessLeaderboardLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "processLeaderboardSchedule"
                }
              ]
            }
          },
          "ProcessLeaderboardLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessLeaderboardLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ProcessLeaderboardEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "SetWordOfTheDayEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 0 * * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "SetWordOfTheDayLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "setWordOfTheDaySchedule"
                }
              ]
            }
          },
          "SetWordOfTheDayLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SetWordOfTheDayLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "SetWordOfTheDayEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-wordflect-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceTest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "test",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSignin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "signin",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSignup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "signup",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthOauth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "oauth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthOauthDashcheck": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "oauth-check",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRequestDashpasswordDashreset": "<REDACTED>",
          "ApiGatewayResourceResetDashpassword": "<REDACTED>",
          "ApiGatewayResourceCheckDashemail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "check-email",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserProfile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "profile",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserStatistics": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "statistics",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserStatisticsDetailed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserStatistics"
              },
              "PathPart": "detailed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserStatisticsDaily": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserStatistics"
              },
              "PathPart": "daily",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserStatisticsWeekly": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserStatistics"
              },
              "PathPart": "weekly",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserStatisticsMonthly": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserStatistics"
              },
              "PathPart": "monthly",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserSession": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "session",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserSessionTrack": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserSession"
              },
              "PathPart": "track",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserTheme": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "theme",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserThemeAnalytics": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserTheme"
              },
              "PathPart": "analytics",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserThemeDay": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserTheme"
              },
              "PathPart": "day",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserUpdateDashstats": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "update-stats",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserProfileDashimageDashuploadDashurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "profile-image-upload-url",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserProfileDashimage": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "profile-image",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserProfileDashbackground": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "profile-background",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserMissions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "missions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserMissionsRewards": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserMissions"
              },
              "PathPart": "rewards",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserCompleteDashmission": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "complete-mission",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserSelectDashframe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "select-frame",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserPurchaseDashframe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "purchase-frame",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserPurchaseDashpremium": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "purchase-premium",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserVerifyDashsubscription": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "verify-subscription",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserVerifyDashpurchase": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "verify-purchase",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserLoginDashevent": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "login-event",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLeaderboard": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "leaderboard",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWord": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "word",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWordDefinition": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWord"
              },
              "PathPart": "definition",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWordDashofDashtheDashday": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "word-of-the-day",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFrames": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "frames",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattles": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "battles",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesInvite": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattles"
              },
              "PathPart": "invite",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesInvitations": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattles"
              },
              "PathPart": "invitations",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesInvitationsInvitationidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattlesInvitations"
              },
              "PathPart": "{invitationId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVar"
              },
              "PathPart": "respond",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesSubmitDashscore": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattles"
              },
              "PathPart": "submit-score",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesActive": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattles"
              },
              "PathPart": "active",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesHistory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattles"
              },
              "PathPart": "history",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesScore": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattles"
              },
              "PathPart": "score",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBattlesComplete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBattles"
              },
              "PathPart": "complete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthorizer": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSetDashwordDashofDashtheDashday": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "set-word-of-the-day",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersSearch": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "search",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDebug": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "debug",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDebugUserDashwords": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDebug"
              },
              "PathPart": "user-words",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTestOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSignupOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthOauthOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthOauth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthOauthDashcheckOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthOauthDashcheck"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRequestDashpasswordDashresetOptions": "<REDACTED>",
          "ApiGatewayMethodResetDashpasswordOptions": "<REDACTED>",
          "ApiGatewayMethodCheckDashemailOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheckDashemail"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserProfileOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserStatisticsDetailedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsDetailed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserStatisticsDailyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsDaily"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserStatisticsWeeklyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsWeekly"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserStatisticsMonthlyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsMonthly"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserSessionTrackOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserSessionTrack"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserThemeAnalyticsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserThemeAnalytics"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserThemeDayOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserThemeDay"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserUpdateDashstatsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserUpdateDashstats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserProfileDashimageDashuploadDashurlOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfileDashimageDashuploadDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserProfileDashimageOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfileDashimage"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserProfileDashbackgroundOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfileDashbackground"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLeaderboardOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLeaderboard"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserMissionsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserMissions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserCompleteDashmissionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserCompleteDashmission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserMissionsRewardsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserMissionsRewards"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWordDefinitionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWordDefinition"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWordDashofDashtheDashdayOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWordDashofDashtheDashday"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFramesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFrames"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserSelectDashframeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserSelectDashframe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserPurchaseDashframeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserPurchaseDashframe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserPurchaseDashpremiumOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserPurchaseDashpremium"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserVerifyDashsubscriptionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserVerifyDashsubscription"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserVerifyDashpurchaseOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserVerifyDashpurchase"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesInviteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesInvitationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesInvitations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesSubmitDashscoreOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesSubmitDashscore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesActiveOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesActive"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesHistoryOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesHistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesScoreOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesScore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBattlesCompleteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesComplete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthorizerOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorizer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserLoginDasheventOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserLoginDashevent"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSetDashwordDashofDashtheDashdayOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSetDashwordDashofDashtheDashday"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersSearchOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersSearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDebugUserDashwordsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugUserDashwords"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTestGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TestLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "TestLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSigninPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSignin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SigninLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SigninLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSigninOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "OPTIONS",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSignin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SigninLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SigninLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSignupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SignupLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthOauthPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthOauth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OauthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "OauthLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthOauthDashcheckPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthOauthDashcheck"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OauthCheckLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "OauthCheckLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRequestDashpasswordDashresetPost": "<REDACTED>",
          "ApiGatewayMethodResetDashpasswordPost": "<REDACTED>",
          "ApiGatewayMethodCheckDashemailPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCheckDashemail"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CheckEmailLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserProfileGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserProfileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserProfileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserStatisticsDetailedGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsDetailed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserStatisticsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserStatisticsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserStatisticsDailyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsDaily"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserDailyStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserDailyStatsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserStatisticsWeeklyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsWeekly"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserWeeklyStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserWeeklyStatsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserStatisticsMonthlyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserStatisticsMonthly"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserMonthlyStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserMonthlyStatsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserSessionTrackPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserSessionTrack"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TrackUserSessionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "TrackUserSessionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserThemeAnalyticsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserThemeAnalytics"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserThemeAnalyticsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserThemeAnalyticsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserThemeDayGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserThemeDay"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserThemeDayStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserThemeDayStatsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserUpdateDashstatsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserUpdateDashstats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserStatsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserProfileDashimageDashuploadDashurlPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfileDashimageDashuploadDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProfileImageUploadUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProfileImageUploadUrlLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserProfileDashimagePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfileDashimage"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProfileImageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateProfileImageLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserProfileDashbackgroundGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfileDashbackground"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserProfileBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUserProfileDashbackgroundPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserProfileDashbackground"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserProfileBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodLeaderboardGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLeaderboard"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLeaderboardLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetLeaderboardLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserMissionsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserMissions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserMissionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUserCompleteDashmissionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserCompleteDashmission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CompleteUserMissionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUserMissionsRewardsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserMissionsRewards"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MissionRewardsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MissionRewardsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWordDefinitionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWordDefinition"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetWordDefinitionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetWordDefinitionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWordDashofDashtheDashdayGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWordDashofDashtheDashday"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetWordOfTheDayLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetWordOfTheDayLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFramesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFrames"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserFramesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserFramesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserSelectDashframePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserSelectDashframe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SelectUserFrameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUserPurchaseDashframePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserPurchaseDashframe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PurchaseFrameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUserPurchaseDashpremiumPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserPurchaseDashpremium"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PurchasePremiumLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUserVerifyDashsubscriptionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserVerifyDashsubscription"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifySubscriptionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUserVerifyDashpurchasePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserVerifyDashpurchase"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyPurchaseLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodBattlesInvitePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBattleInvitationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodBattlesInvitationsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesInvitations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBattleInvitationsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RespondToBattleInvitationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodBattlesSubmitDashscorePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesSubmitDashscore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SubmitBattleScoreLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SubmitBattleScoreLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBattlesActiveGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesActive"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetActiveBattlesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodBattlesHistoryGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesHistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBattleHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodBattlesScorePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesScore"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateBattleScoreLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodBattlesCompletePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBattlesComplete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CompleteBattleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAuthorizerPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorizer"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthorizerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserLoginDasheventPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserLoginDashevent"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSetDashwordDashofDashtheDashdayPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSetDashwordDashofDashtheDashday"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SetWordOfTheDayLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SetWordOfTheDayLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersSearchGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersSearch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SearchUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SearchUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDebugUserDashwordsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugUserDashwords"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DebugUserWordsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DebugUserWordsLambdaPermissionApiGateway"
            ]
          },
          "AuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1758835758341": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodTestOptions",
              "ApiGatewayMethodSignupOptions",
              "ApiGatewayMethodAuthOauthOptions",
              "ApiGatewayMethodAuthOauthDashcheckOptions",
              "ApiGatewayMethodRequestDashpasswordDashresetOptions",
              "ApiGatewayMethodResetDashpasswordOptions",
              "ApiGatewayMethodCheckDashemailOptions",
              "ApiGatewayMethodUserProfileOptions",
              "ApiGatewayMethodUserStatisticsDetailedOptions",
              "ApiGatewayMethodUserStatisticsDailyOptions",
              "ApiGatewayMethodUserStatisticsWeeklyOptions",
              "ApiGatewayMethodUserStatisticsMonthlyOptions",
              "ApiGatewayMethodUserSessionTrackOptions",
              "ApiGatewayMethodUserThemeAnalyticsOptions",
              "ApiGatewayMethodUserThemeDayOptions",
              "ApiGatewayMethodUserUpdateDashstatsOptions",
              "ApiGatewayMethodUserProfileDashimageDashuploadDashurlOptions",
              "ApiGatewayMethodUserProfileDashimageOptions",
              "ApiGatewayMethodUserProfileDashbackgroundOptions",
              "ApiGatewayMethodLeaderboardOptions",
              "ApiGatewayMethodUserMissionsOptions",
              "ApiGatewayMethodUserCompleteDashmissionOptions",
              "ApiGatewayMethodUserMissionsRewardsOptions",
              "ApiGatewayMethodWordDefinitionOptions",
              "ApiGatewayMethodWordDashofDashtheDashdayOptions",
              "ApiGatewayMethodFramesOptions",
              "ApiGatewayMethodUserSelectDashframeOptions",
              "ApiGatewayMethodUserPurchaseDashframeOptions",
              "ApiGatewayMethodUserPurchaseDashpremiumOptions",
              "ApiGatewayMethodUserVerifyDashsubscriptionOptions",
              "ApiGatewayMethodUserVerifyDashpurchaseOptions",
              "ApiGatewayMethodBattlesInviteOptions",
              "ApiGatewayMethodBattlesInvitationsOptions",
              "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondOptions",
              "ApiGatewayMethodBattlesSubmitDashscoreOptions",
              "ApiGatewayMethodBattlesActiveOptions",
              "ApiGatewayMethodBattlesHistoryOptions",
              "ApiGatewayMethodBattlesScoreOptions",
              "ApiGatewayMethodBattlesCompleteOptions",
              "ApiGatewayMethodAuthorizerOptions",
              "ApiGatewayMethodUserLoginDasheventOptions",
              "ApiGatewayMethodSetDashwordDashofDashtheDashdayOptions",
              "ApiGatewayMethodUsersSearchOptions",
              "ApiGatewayMethodDebugUserDashwordsOptions",
              "ApiGatewayMethodTestGet",
              "ApiGatewayMethodSigninPost",
              "ApiGatewayMethodSigninOptions",
              "ApiGatewayMethodSignupPost",
              "ApiGatewayMethodAuthOauthPost",
              "ApiGatewayMethodAuthOauthDashcheckPost",
              "ApiGatewayMethodRequestDashpasswordDashresetPost",
              "ApiGatewayMethodResetDashpasswordPost",
              "ApiGatewayMethodCheckDashemailPost",
              "ApiGatewayMethodUserProfileGet",
              "ApiGatewayMethodUserStatisticsDetailedGet",
              "ApiGatewayMethodUserStatisticsDailyGet",
              "ApiGatewayMethodUserStatisticsWeeklyGet",
              "ApiGatewayMethodUserStatisticsMonthlyGet",
              "ApiGatewayMethodUserSessionTrackPost",
              "ApiGatewayMethodUserThemeAnalyticsGet",
              "ApiGatewayMethodUserThemeDayGet",
              "ApiGatewayMethodUserUpdateDashstatsPost",
              "ApiGatewayMethodUserProfileDashimageDashuploadDashurlPost",
              "ApiGatewayMethodUserProfileDashimagePost",
              "ApiGatewayMethodUserProfileDashbackgroundGet",
              "ApiGatewayMethodUserProfileDashbackgroundPost",
              "ApiGatewayMethodLeaderboardGet",
              "ApiGatewayMethodUserMissionsGet",
              "ApiGatewayMethodUserCompleteDashmissionPost",
              "ApiGatewayMethodUserMissionsRewardsPost",
              "ApiGatewayMethodWordDefinitionGet",
              "ApiGatewayMethodWordDashofDashtheDashdayGet",
              "ApiGatewayMethodFramesGet",
              "ApiGatewayMethodUserSelectDashframePost",
              "ApiGatewayMethodUserPurchaseDashframePost",
              "ApiGatewayMethodUserPurchaseDashpremiumPost",
              "ApiGatewayMethodUserVerifyDashsubscriptionPost",
              "ApiGatewayMethodUserVerifyDashpurchasePost",
              "ApiGatewayMethodBattlesInvitePost",
              "ApiGatewayMethodBattlesInvitationsGet",
              "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondPost",
              "ApiGatewayMethodBattlesSubmitDashscorePost",
              "ApiGatewayMethodBattlesActiveGet",
              "ApiGatewayMethodBattlesHistoryGet",
              "ApiGatewayMethodBattlesScorePost",
              "ApiGatewayMethodBattlesCompletePost",
              "ApiGatewayMethodAuthorizerPost",
              "ApiGatewayMethodUserLoginDasheventPost",
              "ApiGatewayMethodSetDashwordDashofDashtheDashdayPost",
              "ApiGatewayMethodUsersSearchGet",
              "ApiGatewayMethodDebugUserDashwordsGet"
            ]
          },
          "TestLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SigninLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SigninLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "OauthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OauthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "OauthCheckLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OauthCheckLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RequestPasswordResetLambdaPermissionApiGateway": "<REDACTED>",
          "ResetPasswordLambdaPermissionApiGateway": "<REDACTED>",
          "CheckEmailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserProfileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserProfileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserStatisticsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserStatisticsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserDailyStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserDailyStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserWeeklyStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserWeeklyStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserMonthlyStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserMonthlyStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TrackUserSessionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TrackUserSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserThemeAnalyticsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserThemeAnalyticsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserThemeDayStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserThemeDayStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProfileImageUploadUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProfileImageUploadUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProfileImageLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProfileImageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserProfileBackgroundLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserProfileBackgroundLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserProfileBackgroundLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserProfileBackgroundLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLeaderboardLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLeaderboardLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserMissionsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserMissionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CompleteUserMissionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CompleteUserMissionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MissionRewardsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MissionRewardsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetWordDefinitionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetWordDefinitionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetWordOfTheDayLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetWordOfTheDayLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserFramesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserFramesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SelectUserFrameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SelectUserFrameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PurchaseFrameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PurchaseFrameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PurchasePremiumLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PurchasePremiumLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifySubscriptionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifySubscriptionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyPurchaseLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyPurchaseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBattleInvitationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBattleInvitationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBattleInvitationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBattleInvitationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RespondToBattleInvitationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RespondToBattleInvitationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SubmitBattleScoreLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitBattleScoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetActiveBattlesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetActiveBattlesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBattleHistoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBattleHistoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateBattleScoreLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateBattleScoreLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CompleteBattleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CompleteBattleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SetWordOfTheDayLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SetWordOfTheDayLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SearchUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SearchUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DebugUserWordsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DebugUserWordsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-users-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UsernameIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "EmailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "FramesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-frames-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "PasswordResetTokens": "<REDACTED>",
          "MissionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-missions-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "WordOfTheDayTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "wordflect-backend-word-of-the-day-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "date",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "BattlesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "wordflect-backend-battles-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "challengerId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "opponentId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "status-challenger-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "challengerId",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "status-opponent-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "opponentId",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
            "Export": {
              "Name": "sls-wordflect-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "TestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TestLambdaVersionTYfl025watCqC5Vz3Cw10VyKTZLQ2ZmLKi7P838NU"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-TestLambdaFunctionQualifiedArn"
            }
          },
          "SigninLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SigninLambdaVersionAOmV5SqgyilyIbWAXupWSnryrvVBlNFevq5dyGVgM"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-SigninLambdaFunctionQualifiedArn"
            }
          },
          "SignupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignupLambdaVersions1Ts4FeTOFaQm6XiOvY5h1ffRRTfcGwSEYHjXjE"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-SignupLambdaFunctionQualifiedArn"
            }
          },
          "OauthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OauthLambdaVersionwG5HIwqdakZmvNBMSjUafEpLl67IROt6oyYmuGJUgPM"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-OauthLambdaFunctionQualifiedArn"
            }
          },
          "ResetPasswordLambdaFunctionQualifiedArn": "<REDACTED>",
          "CheckEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckEmailLambdaVersionn5BGnsKxN8Qyf8Lg0Auwj7Gl5T0RWnsucBpNP4H20A"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-CheckEmailLambdaFunctionQualifiedArn"
            }
          },
          "GetUserProfileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserProfileLambdaVersionlpRk5rfK08mzfgV7QfIvroiQhDMNTLgLRqQbuzCqqY"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserProfileLambdaFunctionQualifiedArn"
            }
          },
          "GetUserDailyStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserDailyStatsLambdaVersionJQuSGFBLKHhZNx8rjsxI6JR5pzTwXYDlBZF2jbiXww"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserDailyStatsLambdaFunctionQualifiedArn"
            }
          },
          "GetUserWeeklyStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserWeeklyStatsLambdaVersionBCJVzWfasFDCSz4QicmuUclbGvdfGNCUDVkgb79rYs"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserWeeklyStatsLambdaFunctionQualifiedArn"
            }
          },
          "OauthCheckLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OauthCheckLambdaVersionAs5hbRdDM4FDQZmWJ4qC2wzgPjT6pkBqD6fv6V514"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-OauthCheckLambdaFunctionQualifiedArn"
            }
          },
          "GetUserStatisticsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserStatisticsLambdaVersionxIGbedBdXwuGZRPh0JuLXCPAQXSYVml9gCgUhFA98"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserStatisticsLambdaFunctionQualifiedArn"
            }
          },
          "RequestPasswordResetLambdaFunctionQualifiedArn": "<REDACTED>",
          "GetUserMonthlyStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserMonthlyStatsLambdaVersionZeBAGoMUdfDzYx1PWdoUxyvk628hJc98fi26vJcFs"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserMonthlyStatsLambdaFunctionQualifiedArn"
            }
          },
          "TrackUserSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TrackUserSessionLambdaVersionMEAuqFmJQoofpMTs1IzOvBVZHu9E6yk6F6Prf0eYc"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-TrackUserSessionLambdaFunctionQualifiedArn"
            }
          },
          "GetUserThemeDayStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserThemeDayStatsLambdaVersionmrX9uAKj5yWeAg4EbbgZtE0Qa5yutvMyUla9zVXHI"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserThemeDayStatsLambdaFunctionQualifiedArn"
            }
          },
          "GetProfileImageUploadUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProfileImageUploadUrlLambdaVersionDIqeWbAptfIO28kxHm6HOpnQgWOoOaqdpdV0cs34wNQ"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetProfileImageUploadUrlLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserStatsLambdaVersionOdJyikUvjPMmu8bdBhHD6CYfCRpCQBYs5nGmvQMdgNI"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-UpdateUserStatsLambdaFunctionQualifiedArn"
            }
          },
          "GetUserThemeAnalyticsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserThemeAnalyticsLambdaVersionZpC3oWNLbN41cRYyhgMHAtDXCfnZVCYFHbWGVVMwQEI"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserThemeAnalyticsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProfileImageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProfileImageLambdaVersionXlz4eQPATKmHSj9g4TM1fT26eBJKnQAz29KdKWwhdc"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-UpdateProfileImageLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserProfileBackgroundLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserProfileBackgroundLambdaVersionmhEpFxDx6ICIlcRvQVgCtPQjVC8YmHPZsJDsyw7qkgY"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-UpdateUserProfileBackgroundLambdaFunctionQualifiedArn"
            }
          },
          "GetUserProfileBackgroundLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserProfileBackgroundLambdaVersionZXiz6RU3g3ZKLsiBizGREkHTSyDMCATH0ctFr6DdSA"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserProfileBackgroundLambdaFunctionQualifiedArn"
            }
          },
          "GetLeaderboardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLeaderboardLambdaVersionMfXVt3Y1BEHyhRlhyhxqXNywVziJCyr1AHKDEc4io"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetLeaderboardLambdaFunctionQualifiedArn"
            }
          },
          "GetUserMissionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserMissionsLambdaVersionDWbnHv2K137sxPt09bvauTZkQbGQHSGbdn4yFHnEA"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserMissionsLambdaFunctionQualifiedArn"
            }
          },
          "CompleteUserMissionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CompleteUserMissionLambdaVersionx36gsWs8GwF6ULatMOVnvipW9GOmyXFMTvoLydjU0E"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-CompleteUserMissionLambdaFunctionQualifiedArn"
            }
          },
          "MissionRewardsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MissionRewardsLambdaVersionHEWJvvobcdAQWCMUZ5cB518hnn8CvX292MTIOvfcio"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-MissionRewardsLambdaFunctionQualifiedArn"
            }
          },
          "GetWordOfTheDayLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetWordOfTheDayLambdaVersionj6eIcf2mUX15dFqp8ReX0jYF5HXcIB70IJ3j7IrM"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetWordOfTheDayLambdaFunctionQualifiedArn"
            }
          },
          "GetUserFramesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserFramesLambdaVersionRGGnmox6U42zrjVVA1GEY0IaHiKVvpdb9LkS06FELl4"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetUserFramesLambdaFunctionQualifiedArn"
            }
          },
          "GetWordDefinitionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetWordDefinitionLambdaVersionOHh2fmrpnkQSlv8J1SHrfxbQ0xIccRcyAGpP53Btp0"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetWordDefinitionLambdaFunctionQualifiedArn"
            }
          },
          "SelectUserFrameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SelectUserFrameLambdaVersionfBvTu9m2YHvlJsdVSDYSJ5gvUa4re2GJwXqF3Wxd8"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-SelectUserFrameLambdaFunctionQualifiedArn"
            }
          },
          "PurchasePremiumLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PurchasePremiumLambdaVersionHjtY3EYTj8fQXy420bn3WCb7Pz6ZFh1tO90HRh18"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-PurchasePremiumLambdaFunctionQualifiedArn"
            }
          },
          "PurchaseFrameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PurchaseFrameLambdaVersionMCQO2VLB8RlR3bIqv0e6Vf0fenXdeCDS7OKCOAUBs"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-PurchaseFrameLambdaFunctionQualifiedArn"
            }
          },
          "VerifySubscriptionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifySubscriptionLambdaVersioniSlqMUPZ0zvMrLEQJpCLE2nPAwgHBul7dUHIPlRLk"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-VerifySubscriptionLambdaFunctionQualifiedArn"
            }
          },
          "VerifyPurchaseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyPurchaseLambdaVersion7RgMtBD0sHxAWQxIOuT5vzw9ghO3z9x47uYT4iTtdg"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-VerifyPurchaseLambdaFunctionQualifiedArn"
            }
          },
          "CreateBattleInvitationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBattleInvitationLambdaVersionqOfZM8KbZd5qVqehzWk3XxlJn4FbxIEuJBECtcoqRzQ"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-CreateBattleInvitationLambdaFunctionQualifiedArn"
            }
          },
          "GetBattleInvitationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBattleInvitationsLambdaVersiondTewCKX7zqyplhIEgwhYmP5xDBztHGZ0bZ4J7Uj3g"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetBattleInvitationsLambdaFunctionQualifiedArn"
            }
          },
          "RespondToBattleInvitationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RespondToBattleInvitationLambdaVersioninxp10clyZ4TOrUgUzJEqOLE77GK3LPnJP4zgjF1a6Y"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-RespondToBattleInvitationLambdaFunctionQualifiedArn"
            }
          },
          "SubmitBattleScoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitBattleScoreLambdaVersionTv2XFcnLuiBiWZN2XKAKbMGn1t8YLO8A45C32OVKU"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-SubmitBattleScoreLambdaFunctionQualifiedArn"
            }
          },
          "GetActiveBattlesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetActiveBattlesLambdaVersionnln35JieEfadwa7xBnbW9vEJe70oOq0XfvgkKIP70A"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetActiveBattlesLambdaFunctionQualifiedArn"
            }
          },
          "GetBattleHistoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBattleHistoryLambdaVersionyRszlz29L9CAQgJ8DmGgw5phBXdv7hupG0PEox5pNi4"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-GetBattleHistoryLambdaFunctionQualifiedArn"
            }
          },
          "UpdateBattleScoreLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateBattleScoreLambdaVersiony8d2PraFiSFZdOTMNU3ZiB3x1E1oToQpTLRXc9vK8"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-UpdateBattleScoreLambdaFunctionQualifiedArn"
            }
          },
          "CompleteBattleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CompleteBattleLambdaVersionD1Jm7HHMuGWMekzDnlM6j8mZCFVHRs3Ns0MFyUwQ"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-CompleteBattleLambdaFunctionQualifiedArn"
            }
          },
          "CleanupOldBattlesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CleanupOldBattlesLambdaVersionL5DRmZ08bj1NdHaXDoUx2jFDZsJWeXugIIYj83NpAo"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-CleanupOldBattlesLambdaFunctionQualifiedArn"
            }
          },
          "AuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizerLambdaVersionLtjGPoNOyP2AAkPJMms5pgJXMDFQ0ceXmobmCJICU"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-AuthorizerLambdaFunctionQualifiedArn"
            }
          },
          "ProcessLeaderboardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessLeaderboardLambdaVersionXizgJ6VKrdAYeCXPCvaX5u1JrM4xzAMAzpEhH0"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-ProcessLeaderboardLambdaFunctionQualifiedArn"
            }
          },
          "LoginEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginEventLambdaVersionX6I2uUZSt3zP0MIZWaaRSk3GVi4f6KCkpXY7v3o4g"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-LoginEventLambdaFunctionQualifiedArn"
            }
          },
          "SearchUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SearchUsersLambdaVersionzkx8pPQm7Gr6MpxnACNkimVSkcXWQ6cR73kl80nBb0"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-SearchUsersLambdaFunctionQualifiedArn"
            }
          },
          "SetWordOfTheDayLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SetWordOfTheDayLambdaVersionlVprrqPe9VQwgTJ6nH2mjBWo0PFMb4lgf30KwL8dwM"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-SetWordOfTheDayLambdaFunctionQualifiedArn"
            }
          },
          "DebugUserWordsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DebugUserWordsLambdaVersionIqoRQdN9WBqAGPgJNZRNBjjQhyYxtCC4lUkp8YHfMjs"
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-DebugUserWordsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-wordflect-backend-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: wordflect-backend\n\nframeworkVersion: '4'\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  stage: ${opt:stage, 'dev'}\n  region: us-east-2\n  environment:\n    USERS_TABLE: ${self:service}-users-${self:provider.stage}\n    MISSIONS_TABLE: ${self:service}-missions-${self:provider.stage}\n    FRAMES_TABLE: ${self:service}-frames-${self:provider.stage}\n    BATTLES_TABLE: ${self:service}-battles-${self:provider.stage}\n    JWT_SECRET: c6ebabf7bf78c0155fd64564a956644acf63470cf965a6ac590b97d0f0ae0622\n    PASSWORD_RESET_TABLE: ${self:service}-password-reset-tokens-${self:provider.stage}\n    SES_FROM_EMAIL: 'noreply@wordflect.com'\n    WORDNIK_API_KEY: abiqxd88fvmf0va1l3dvkd23oov1h7go7qxwyakjpvh54l9dg\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:PutItem\n        - dynamodb:GetItem\n        - dynamodb:DeleteItem\n        - dynamodb:UpdateItem\n        - ses:SendEmail\n        - ses:SendRawEmail\n        - s3:PutObject\n        - s3:GetObject\n        - s3:ListBucket\n        - s3:PutObjectAcl\n        - dynamodb:Scan\n      Resource:\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-users-${self:provider.stage}\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-users-${self:provider.stage}/index/*\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-missions-${self:provider.stage}\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-frames-${self:provider.stage}\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-battles-${self:provider.stage}\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-battles-${self:provider.stage}/index/*\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-password-reset-tokens-${self:provider.stage}\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-word-of-the-day-${self:provider.stage}\n        - arn:aws:dynamodb:${self:provider.region}:*:table/WordOfTheDay\n        - arn:aws:ses:${self:provider.region}:*:identity/wordflect.com\n        - arn:aws:ses:${self:provider.region}:*:identity/supergeek@me.com\n        - arn:aws:ses:${self:provider.region}:*:identity/*\n        - arn:aws:s3:::wordflect-profile-images\n        - arn:aws:s3:::wordflect-profile-images/*\n        - arn:aws:s3:::wordflect-profile-images/profile-images/*\n        - arn:aws:s3:::wordflect-profile-images/profile-images/*/*\n\npackage:\n  individually: true\n  exclude:\n    - .git/**\n    - .vscode/**\n    - .DS_Store\n    - README.md\n    - docs/**\n    - test/**\n    - tests/**\n    - __tests__/**\n    - coverage/**\n    - node_modules/aws-sdk/**\n    - node_modules/.bin/**\n    - node_modules/typescript/**\n    - node_modules/@types/**\n    - node_modules/serverless/**\n    - node_modules/serverless-*/**\n    - node_modules/.cache/**\n    - scripts/**\n    - '*.log'\n    - .env\n    - .env.*\n    # Additional exclusions for large/unnecessary files\n    - backup_redundant_dirs/**\n    - venv/**\n    - '*.py'\n    - '*.pyc'\n    - '*.sh'\n    - '*.md'\n    - '*.txt'\n    - '*.json.bak'\n    - '*.backup'\n    - '*.tmp'\n    - '*.temp'\n    - versions_*.json\n    - all_*.txt\n    - all_*.json\n    - output.json\n    - response.json\n    - auth-check-email-*.json\n    - dkim-cname-changes.json\n    - dmarc-record.json\n    - mailfrom-records.json\n    - lambda_functions.json\n    - proposed_reward_structure.md\n    - temp-deploy/**\n    - minimal-deploy/**\n    - minimal-signin/**\n    - prod_deploy/**\n    - lambda-layer/**\n    - analyze_mission_rewards.js\n    - check-*.js\n    - debug*.js\n    - generate-jwt.js\n    - initialize*.js\n    - reset*.js\n    - test_*.js\n    - test_*.py\n    - test_*.sh\n\nfunctions:\n  test:\n    handler: src/handlers/testHandler.handler\n    events:\n      - http:\n          path: test\n          method: get\n          cors: true\n  signin:\n    handler: src/handlers/authSignin.handler\n    events:\n      - http:\n          path: signin\n          method: post\n          cors: false\n      - http:\n          path: signin\n          method: options\n          cors: false\n  signup:\n    handler: src/handlers/authSignup.handler\n    events:\n      - http:\n          path: signup\n          method: post\n          cors: true\n  oauth:\n    handler: src/handlers/authOAuth.handler\n    events:\n      - http:\n          path: auth/oauth\n          method: post\n          cors: true\n  oauthCheck:\n    handler: src/handlers/authOAuthCheck.handler\n    events:\n      - http:\n          path: auth/oauth-check\n          method: post\n          cors: true\n  requestPasswordReset:\n    handler: src/handlers/requestPasswordReset.handler\n    events:\n      - http:\n          path: request-password-reset\n          method: post\n          cors: true\n  resetPassword:\n    handler: src/handlers/resetPassword.handler\n    events:\n      - http:\n          path: reset-password\n          method: post\n          cors: true\n  checkEmail:\n    handler: src/handlers/checkEmail.handler\n    events:\n      - http:\n          path: check-email\n          method: post\n          cors: true\n  getUserProfile:\n    handler: src/handlers/getUserProfile.handler\n    events:\n      - http:\n          path: user/profile\n          method: get\n          cors: true\n  getUserStatistics:\n    handler: src/handlers/getUserStatistics.handler\n    events:\n      - http:\n          path: user/statistics/detailed\n          method: get\n          cors: true\n  getUserDailyStats:\n    handler: src/handlers/getUserDailyStats.handler\n    events:\n      - http:\n          path: user/statistics/daily\n          method: get\n          cors: true\n  getUserWeeklyStats:\n    handler: src/handlers/getUserWeeklyStats.handler\n    events:\n      - http:\n          path: user/statistics/weekly\n          method: get\n          cors: true\n  getUserMonthlyStats:\n    handler: src/handlers/getUserMonthlyStats.handler\n    events:\n      - http:\n          path: user/statistics/monthly\n          method: get\n          cors: true\n  trackUserSession:\n    handler: src/handlers/trackUserSession.handler\n    events:\n      - http:\n          path: user/session/track\n          method: post\n          cors: true\n  getUserThemeAnalytics:\n    handler: src/handlers/getUserThemeAnalytics.handler\n    events:\n      - http:\n          path: user/theme/analytics\n          method: get\n          cors: true\n  getUserThemeDayStats:\n    handler: src/handlers/getUserThemeDayStats.handler\n    events:\n      - http:\n          path: user/theme/day\n          method: get\n          cors: true\n  updateUserStats:\n    handler: src/handlers/updateUserStats.handler\n    events:\n      - http:\n          path: user/update-stats\n          method: post\n          cors: true\n  getProfileImageUploadUrl:\n    handler: src/handlers/getProfileImageUploadUrl.handler\n    events:\n      - http:\n          path: user/profile-image-upload-url\n          method: post\n          cors: true\n  updateProfileImage:\n    handler: src/handlers/updateProfileImage.handler\n    events:\n      - http:\n          path: user/profile-image\n          method: post\n          cors: true\n  getUserProfileBackground:\n    handler: src/handlers/getUserProfileBackground.handler\n    events:\n      - http:\n          path: user/profile-background\n          method: get\n          cors: true\n          authorizer: authorizer\n  updateUserProfileBackground:\n    handler: src/handlers/updateUserProfileBackground.handler\n    events:\n      - http:\n          path: user/profile-background\n          method: post\n          cors: true\n          authorizer: authorizer\n  getLeaderboard:\n    handler: src/handlers/getLeaderboard.handler\n    events:\n      - http:\n          path: leaderboard\n          method: get\n          cors: true\n  getUserMissions:\n    handler: src/handlers/getUserMissions.handler\n    events:\n      - http:\n          path: user/missions\n          method: get\n          cors: true\n          authorizer: authorizer\n    environment:\n      WORD_OF_THE_DAY_TABLE: ${self:service}-word-of-the-day-${self:provider.stage}\n  completeUserMission:\n    handler: src/handlers/completeUserMission.handler\n    events:\n      - http:\n          path: user/complete-mission\n          method: post\n          cors: true\n          authorizer: authorizer\n  missionRewards:\n    handler: src/handlers/missionRewards.handler\n    events:\n      - http:\n          path: user/missions/rewards\n          method: post\n          cors: true\n  getWordDefinition:\n    handler: src/handlers/getWordDefinition.handler\n    events:\n      - http:\n          path: word/definition\n          method: get\n          cors: true\n  getWordOfTheDay:\n    handler: src/handlers/getWordOfTheDay.handler\n    events:\n      - http:\n          path: word-of-the-day\n          method: get\n          cors: true\n    environment:\n      WORD_OF_THE_DAY_TABLE: ${self:service}-word-of-the-day-${self:provider.stage}\n  getUserFrames:\n    handler: src/handlers/getUserFrames.handler\n    events:\n      - http:\n          path: frames\n          method: get\n          cors: true\n  selectUserFrame:\n    handler: src/handlers/selectUserFrame.handler\n    events:\n      - http:\n          path: user/select-frame\n          method: post\n          cors: true\n          authorizer: authorizer\n  purchaseFrame:\n    handler: src/handlers/purchaseFrame.handler\n    events:\n      - http:\n          path: user/purchase-frame\n          method: post\n          cors: true\n          authorizer: authorizer\n  purchasePremium:\n    handler: src/handlers/purchasePremium.handler\n    events:\n      - http:\n          path: user/purchase-premium\n          method: post\n          cors: true\n          authorizer: authorizer\n  verifySubscription:\n    handler: src/handlers/verifySubscription.handler\n    events:\n      - http:\n          path: user/verify-subscription\n          method: post\n          cors: true\n          authorizer: authorizer\n  verifyPurchase:\n    handler: src/handlers/verifyPurchase.handler\n    events:\n      - http:\n          path: user/verify-purchase\n          method: post\n          cors: true\n          authorizer: authorizer\n  createBattleInvitation:\n    handler: src/handlers/createBattleInvitation.handler\n    events:\n      - http:\n          path: battles/invite\n          method: post\n          cors: true\n          authorizer: authorizer\n  getBattleInvitations:\n    handler: src/handlers/getBattleInvitations.handler\n    events:\n      - http:\n          path: battles/invitations\n          method: get\n          cors: true\n          authorizer: authorizer\n  respondToBattleInvitation:\n    handler: src/handlers/respondToBattleInvitation.handler\n    events:\n      - http:\n          path: battles/invitations/{invitationId}/respond\n          method: post\n          cors: true\n          authorizer: authorizer\n  submitBattleScore:\n    handler: src/handlers/submitBattleScore.handler\n    events:\n      - http:\n          path: battles/submit-score\n          method: post\n          cors: true\n  getActiveBattles:\n    handler: src/handlers/getActiveBattles.handler\n    events:\n      - http:\n          path: battles/active\n          method: get\n          cors: true\n          authorizer: authorizer\n  getBattleHistory:\n    handler: src/handlers/getBattleHistory.handler\n    events:\n      - http:\n          path: battles/history\n          method: get\n          cors: true\n          authorizer: authorizer\n  updateBattleScore:\n    handler: src/handlers/updateBattleScore.handler\n    events:\n      - http:\n          path: battles/score\n          method: post\n          cors: true\n          authorizer: authorizer\n  completeBattle:\n    handler: src/handlers/completeBattle.handler\n    events:\n      - http:\n          path: battles/complete\n          method: post\n          cors: true\n          authorizer: authorizer\n  cleanupOldBattles:\n    handler: src/handlers/cleanupOldBattles.handler\n    events:\n      - schedule: cron(0 3 * * ? *)  # Run daily at 3 AM UTC\n  authorizer:\n    handler: src/handlers/authorizer.handler\n    events:\n      - http:\n          path: authorizer\n          method: post\n          cors: true\n  processLeaderboard:\n    handler: src/handlers/processLeaderboard.handler\n    events:\n      - schedule: cron(0 2 1 * ? *)\n  loginEvent:\n    handler: src/handlers/loginEvent.handler\n    events:\n      - http:\n          path: user/login-event\n          method: post\n          cors: true\n  setWordOfTheDay:\n    handler: src/handlers/setWordOfTheDay.handler\n    events:\n      - schedule: cron(0 0 * * ? *)\n      - http:\n          path: set-word-of-the-day\n          method: post\n          cors: true\n    environment:\n      WORD_OF_THE_DAY_TABLE: ${self:service}-word-of-the-day-${self:provider.stage}\n  searchUsers:\n    handler: src/handlers/searchUsers.handler\n    events:\n      - http:\n          path: users/search\n          method: get\n          cors: true\n  debugUserWords:\n    handler: src/handlers/debugUserWords.handler\n    events:\n      - http:\n          path: debug/user-words\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:service}-users-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: username\n            AttributeType: S\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: UsernameIndex\n            KeySchema:\n              - AttributeName: username\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n          - IndexName: EmailIndex\n            KeySchema:\n              - AttributeName: email\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n    FramesTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:service}-frames-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n    PasswordResetTokens:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-password-reset-tokens-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: email\n            AttributeType: S\n        KeySchema:\n          - AttributeName: email\n            KeyType: HASH\n        TimeToLiveSpecification:\n          AttributeName: expiresAt\n          Enabled: true\n        BillingMode: PAY_PER_REQUEST\n    MissionsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:service}-missions-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n    WordOfTheDayTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:service}-word-of-the-day-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: date\n            AttributeType: S\n        KeySchema:\n          - AttributeName: date\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n    BattlesTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:service}-battles-${self:provider.stage}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: status\n            AttributeType: S\n          - AttributeName: challengerId\n            AttributeType: S\n          - AttributeName: opponentId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: status-challenger-index\n            KeySchema:\n              - AttributeName: status\n                KeyType: HASH\n              - AttributeName: challengerId\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n          - IndexName: status-opponent-index\n            KeySchema:\n              - AttributeName: status\n                KeyType: HASH\n              - AttributeName: opponentId\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST ",
    "command": [
      "package"
    ],
    "options": {
      "verbose": true
    },
    "orgId": "98e99cac-e232-46ff-8385-56a1e0a884f3",
    "orgName": "montebay",
    "userId": "YPHS1FBcxrlcmZ9wRF",
    "userName": "montebay",
    "serviceProviderAwsAccountId": "516141816050",
    "serviceProviderAwsCfStackName": "wordflect-backend-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-2:516141816050:stack/wordflect-backend-dev/60b76490-7eb4-11f0-9462-06a164cb83d1",
    "serviceProviderAwsCfStackCreated": "2025-08-21T17:29:23.188Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-25T21:27:51.265Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "UpdateProfileImageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-updateProfileImage:183",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-UpdateProfileImageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserDailyStatsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserDailyStats:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserDailyStatsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserStatsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-updateUserStats:184",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-UpdateUserStatsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ProcessLeaderboardLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-processLeaderboard:40",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-ProcessLeaderboardLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
        "ExportName": "sls-wordflect-backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "RequestPasswordResetLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-requestPasswordReset:192",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-RequestPasswordResetLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RespondToBattleInvitationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-respondToBattleInvitation:45",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-RespondToBattleInvitationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateBattleScoreLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-updateBattleScore:46",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-UpdateBattleScoreLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CompleteBattleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-completeBattle:46",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-CompleteBattleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "TestLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-test:39",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-TestLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ResetPasswordLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-resetPassword:192",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-ResetPasswordLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserThemeAnalyticsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserThemeAnalytics:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserThemeAnalyticsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "MissionRewardsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-missionRewards:176",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-MissionRewardsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserFramesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserFrames:125",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserFramesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserThemeDayStatsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserThemeDayStats:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserThemeDayStatsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DebugUserWordsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-debugUserWords:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-DebugUserWordsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetWordOfTheDayLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getWordOfTheDay:155",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetWordOfTheDayLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "OauthLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-oauth:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-OauthLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserProfileBackgroundLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserProfileBackground:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserProfileBackgroundLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateBattleInvitationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-createBattleInvitation:45",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-CreateBattleInvitationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetBattleHistoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getBattleHistory:46",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetBattleHistoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SigninLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-signin:206",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-SigninLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "OauthCheckLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-oauthCheck:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-OauthCheckLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetBattleInvitationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getBattleInvitations:45",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetBattleInvitationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SignupLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-signup:204",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-SignupLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SetWordOfTheDayLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-setWordOfTheDay:143",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-SetWordOfTheDayLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "TrackUserSessionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-trackUserSession:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-TrackUserSessionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetWordDefinitionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getWordDefinition:160",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetWordDefinitionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SelectUserFrameLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-selectUserFrame:88",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-SelectUserFrameLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetActiveBattlesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getActiveBattles:46",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetActiveBattlesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserProfileBackgroundLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-updateUserProfileBackground:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-UpdateUserProfileBackgroundLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CompleteUserMissionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-completeUserMission:173",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-CompleteUserMissionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PurchaseFrameLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-purchaseFrame:64",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-PurchaseFrameLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SubmitBattleScoreLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-submitBattleScore:36",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-SubmitBattleScoreLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserMissionsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserMissions:176",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserMissionsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserStatisticsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserStatistics:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserStatisticsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetLeaderboardLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getLeaderboard:178",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetLeaderboardLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CheckEmailLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-checkEmail:185",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-CheckEmailLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SearchUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-searchUsers:35",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-SearchUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AuthorizerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-authorizer:75",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-AuthorizerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetProfileImageUploadUrlLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getProfileImageUploadUrl:183",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetProfileImageUploadUrlLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "VerifyPurchaseLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-verifyPurchase:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-VerifyPurchaseLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CleanupOldBattlesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-cleanupOldBattles:29",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-CleanupOldBattlesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserProfileLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserProfile:184",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserProfileLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PurchasePremiumLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-purchasePremium:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-PurchasePremiumLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserMonthlyStatsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserMonthlyStats:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserMonthlyStatsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserWeeklyStatsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-getUserWeeklyStats:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-GetUserWeeklyStatsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "VerifySubscriptionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-verifySubscription:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-VerifySubscriptionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LoginEventLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:516141816050:function:wordflect-backend-dev-loginEvent:35",
        "Description": "Current Lambda function version",
        "ExportName": "sls-wordflect-backend-dev-LoginEventLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://kp1p5v7p14.execute-api.us-east-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-wordflect-backend-dev-ServiceEndpoint"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "TestLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-test"
          }
        },
        "SigninLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-signin"
          }
        },
        "SignupLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-signup"
          }
        },
        "OauthLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-oauth"
          }
        },
        "OauthCheckLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-oauthCheck"
          }
        },
        "RequestPasswordResetLogGroup": "<REDACTED>",
        "ResetPasswordLogGroup": "<REDACTED>",
        "CheckEmailLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-checkEmail"
          }
        },
        "GetUserProfileLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserProfile"
          }
        },
        "GetUserStatisticsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserStatistics"
          }
        },
        "GetUserDailyStatsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserDailyStats"
          }
        },
        "GetUserWeeklyStatsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserWeeklyStats"
          }
        },
        "GetUserMonthlyStatsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserMonthlyStats"
          }
        },
        "TrackUserSessionLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-trackUserSession"
          }
        },
        "GetUserThemeAnalyticsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserThemeAnalytics"
          }
        },
        "GetUserThemeDayStatsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserThemeDayStats"
          }
        },
        "UpdateUserStatsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateUserStats"
          }
        },
        "GetProfileImageUploadUrlLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getProfileImageUploadUrl"
          }
        },
        "UpdateProfileImageLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateProfileImage"
          }
        },
        "GetUserProfileBackgroundLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserProfileBackground"
          }
        },
        "UpdateUserProfileBackgroundLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateUserProfileBackground"
          }
        },
        "GetLeaderboardLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getLeaderboard"
          }
        },
        "GetUserMissionsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserMissions"
          }
        },
        "CompleteUserMissionLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-completeUserMission"
          }
        },
        "MissionRewardsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-missionRewards"
          }
        },
        "GetWordDefinitionLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getWordDefinition"
          }
        },
        "GetWordOfTheDayLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getWordOfTheDay"
          }
        },
        "GetUserFramesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getUserFrames"
          }
        },
        "SelectUserFrameLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-selectUserFrame"
          }
        },
        "PurchaseFrameLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-purchaseFrame"
          }
        },
        "PurchasePremiumLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-purchasePremium"
          }
        },
        "VerifySubscriptionLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-verifySubscription"
          }
        },
        "VerifyPurchaseLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-verifyPurchase"
          }
        },
        "CreateBattleInvitationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-createBattleInvitation"
          }
        },
        "GetBattleInvitationsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getBattleInvitations"
          }
        },
        "RespondToBattleInvitationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-respondToBattleInvitation"
          }
        },
        "SubmitBattleScoreLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-submitBattleScore"
          }
        },
        "GetActiveBattlesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getActiveBattles"
          }
        },
        "GetBattleHistoryLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-getBattleHistory"
          }
        },
        "UpdateBattleScoreLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-updateBattleScore"
          }
        },
        "CompleteBattleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-completeBattle"
          }
        },
        "CleanupOldBattlesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-cleanupOldBattles"
          }
        },
        "AuthorizerLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-authorizer"
          }
        },
        "ProcessLeaderboardLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-processLeaderboard"
          }
        },
        "LoginEventLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-loginEvent"
          }
        },
        "SetWordOfTheDayLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-setWordOfTheDay"
          }
        },
        "SearchUsersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-searchUsers"
          }
        },
        "DebugUserWordsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/wordflect-backend-dev-debugUserWords"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "wordflect-backend",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wordflect-backend-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wordflect-backend-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:UpdateItem",
                        "ses:SendEmail",
                        "ses:SendRawEmail",
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:ListBucket",
                        "s3:PutObjectAcl",
                        "dynamodb:Scan"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev",
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-users-dev/index/*",
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-missions-dev",
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-frames-dev",
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev",
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-battles-dev/index/*",
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-password-reset-tokens-dev",
                        "arn:aws:dynamodb:us-east-2:*:table/wordflect-backend-word-of-the-day-dev",
                        "arn:aws:dynamodb:us-east-2:*:table/WordOfTheDay",
                        "arn:aws:ses:us-east-2:*:identity/wordflect.com",
                        "arn:aws:ses:us-east-2:*:identity/supergeek@me.com",
                        "arn:aws:ses:us-east-2:*:identity/*",
                        "arn:aws:s3:::wordflect-profile-images",
                        "arn:aws:s3:::wordflect-profile-images/*",
                        "arn:aws:s3:::wordflect-profile-images/profile-images/*",
                        "arn:aws:s3:::wordflect-profile-images/profile-images/*/*"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "wordflect-backend",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "TestLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/test.zip"
            },
            "Handler": "src/handlers/testHandler.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-test",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "TestLogGroup"
          ]
        },
        "SigninLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/signin.zip"
            },
            "Handler": "src/handlers/authSignin.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-signin",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SigninLogGroup"
          ]
        },
        "SignupLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/signup.zip"
            },
            "Handler": "src/handlers/authSignup.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-signup",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SignupLogGroup"
          ]
        },
        "OauthLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/oauth.zip"
            },
            "Handler": "src/handlers/authOAuth.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-oauth",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "OauthLogGroup"
          ]
        },
        "OauthCheckLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/oauthCheck.zip"
            },
            "Handler": "src/handlers/authOAuthCheck.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-oauthCheck",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "OauthCheckLogGroup"
          ]
        },
        "RequestPasswordResetLambdaFunction": "<REDACTED>",
        "ResetPasswordLambdaFunction": "<REDACTED>",
        "CheckEmailLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/checkEmail.zip"
            },
            "Handler": "src/handlers/checkEmail.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-checkEmail",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CheckEmailLogGroup"
          ]
        },
        "GetUserProfileLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserProfile.zip"
            },
            "Handler": "src/handlers/getUserProfile.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserProfile",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserProfileLogGroup"
          ]
        },
        "GetUserStatisticsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserStatistics.zip"
            },
            "Handler": "src/handlers/getUserStatistics.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserStatistics",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserStatisticsLogGroup"
          ]
        },
        "GetUserDailyStatsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserDailyStats.zip"
            },
            "Handler": "src/handlers/getUserDailyStats.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserDailyStats",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserDailyStatsLogGroup"
          ]
        },
        "GetUserWeeklyStatsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserWeeklyStats.zip"
            },
            "Handler": "src/handlers/getUserWeeklyStats.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserWeeklyStats",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserWeeklyStatsLogGroup"
          ]
        },
        "GetUserMonthlyStatsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserMonthlyStats.zip"
            },
            "Handler": "src/handlers/getUserMonthlyStats.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserMonthlyStats",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserMonthlyStatsLogGroup"
          ]
        },
        "TrackUserSessionLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/trackUserSession.zip"
            },
            "Handler": "src/handlers/trackUserSession.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-trackUserSession",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "TrackUserSessionLogGroup"
          ]
        },
        "GetUserThemeAnalyticsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserThemeAnalytics.zip"
            },
            "Handler": "src/handlers/getUserThemeAnalytics.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserThemeAnalytics",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserThemeAnalyticsLogGroup"
          ]
        },
        "GetUserThemeDayStatsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserThemeDayStats.zip"
            },
            "Handler": "src/handlers/getUserThemeDayStats.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserThemeDayStats",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserThemeDayStatsLogGroup"
          ]
        },
        "UpdateUserStatsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateUserStats.zip"
            },
            "Handler": "src/handlers/updateUserStats.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-updateUserStats",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateUserStatsLogGroup"
          ]
        },
        "GetProfileImageUploadUrlLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getProfileImageUploadUrl.zip"
            },
            "Handler": "src/handlers/getProfileImageUploadUrl.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getProfileImageUploadUrl",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetProfileImageUploadUrlLogGroup"
          ]
        },
        "UpdateProfileImageLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateProfileImage.zip"
            },
            "Handler": "src/handlers/updateProfileImage.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-updateProfileImage",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateProfileImageLogGroup"
          ]
        },
        "GetUserProfileBackgroundLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserProfileBackground.zip"
            },
            "Handler": "src/handlers/getUserProfileBackground.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserProfileBackground",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserProfileBackgroundLogGroup"
          ]
        },
        "UpdateUserProfileBackgroundLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateUserProfileBackground.zip"
            },
            "Handler": "src/handlers/updateUserProfileBackground.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-updateUserProfileBackground",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateUserProfileBackgroundLogGroup"
          ]
        },
        "GetLeaderboardLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getLeaderboard.zip"
            },
            "Handler": "src/handlers/getLeaderboard.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getLeaderboard",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetLeaderboardLogGroup"
          ]
        },
        "GetUserMissionsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserMissions.zip"
            },
            "Handler": "src/handlers/getUserMissions.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserMissions",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>",
                "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserMissionsLogGroup"
          ]
        },
        "CompleteUserMissionLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/completeUserMission.zip"
            },
            "Handler": "src/handlers/completeUserMission.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-completeUserMission",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CompleteUserMissionLogGroup"
          ]
        },
        "MissionRewardsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/missionRewards.zip"
            },
            "Handler": "src/handlers/missionRewards.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-missionRewards",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "MissionRewardsLogGroup"
          ]
        },
        "GetWordDefinitionLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getWordDefinition.zip"
            },
            "Handler": "src/handlers/getWordDefinition.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getWordDefinition",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetWordDefinitionLogGroup"
          ]
        },
        "GetWordOfTheDayLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getWordOfTheDay.zip"
            },
            "Handler": "src/handlers/getWordOfTheDay.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getWordOfTheDay",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>",
                "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetWordOfTheDayLogGroup"
          ]
        },
        "GetUserFramesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getUserFrames.zip"
            },
            "Handler": "src/handlers/getUserFrames.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getUserFrames",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserFramesLogGroup"
          ]
        },
        "SelectUserFrameLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/selectUserFrame.zip"
            },
            "Handler": "src/handlers/selectUserFrame.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-selectUserFrame",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SelectUserFrameLogGroup"
          ]
        },
        "PurchaseFrameLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/purchaseFrame.zip"
            },
            "Handler": "src/handlers/purchaseFrame.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-purchaseFrame",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PurchaseFrameLogGroup"
          ]
        },
        "PurchasePremiumLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/purchasePremium.zip"
            },
            "Handler": "src/handlers/purchasePremium.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-purchasePremium",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PurchasePremiumLogGroup"
          ]
        },
        "VerifySubscriptionLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/verifySubscription.zip"
            },
            "Handler": "src/handlers/verifySubscription.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-verifySubscription",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "VerifySubscriptionLogGroup"
          ]
        },
        "VerifyPurchaseLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/verifyPurchase.zip"
            },
            "Handler": "src/handlers/verifyPurchase.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-verifyPurchase",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "VerifyPurchaseLogGroup"
          ]
        },
        "CreateBattleInvitationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/createBattleInvitation.zip"
            },
            "Handler": "src/handlers/createBattleInvitation.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-createBattleInvitation",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateBattleInvitationLogGroup"
          ]
        },
        "GetBattleInvitationsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getBattleInvitations.zip"
            },
            "Handler": "src/handlers/getBattleInvitations.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getBattleInvitations",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetBattleInvitationsLogGroup"
          ]
        },
        "RespondToBattleInvitationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/respondToBattleInvitation.zip"
            },
            "Handler": "src/handlers/respondToBattleInvitation.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-respondToBattleInvitation",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "RespondToBattleInvitationLogGroup"
          ]
        },
        "SubmitBattleScoreLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/submitBattleScore.zip"
            },
            "Handler": "src/handlers/submitBattleScore.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-submitBattleScore",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SubmitBattleScoreLogGroup"
          ]
        },
        "GetActiveBattlesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getActiveBattles.zip"
            },
            "Handler": "src/handlers/getActiveBattles.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getActiveBattles",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetActiveBattlesLogGroup"
          ]
        },
        "GetBattleHistoryLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/getBattleHistory.zip"
            },
            "Handler": "src/handlers/getBattleHistory.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-getBattleHistory",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetBattleHistoryLogGroup"
          ]
        },
        "UpdateBattleScoreLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/updateBattleScore.zip"
            },
            "Handler": "src/handlers/updateBattleScore.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-updateBattleScore",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateBattleScoreLogGroup"
          ]
        },
        "CompleteBattleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/completeBattle.zip"
            },
            "Handler": "src/handlers/completeBattle.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-completeBattle",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CompleteBattleLogGroup"
          ]
        },
        "CleanupOldBattlesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/cleanupOldBattles.zip"
            },
            "Handler": "src/handlers/cleanupOldBattles.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-cleanupOldBattles",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CleanupOldBattlesLogGroup"
          ]
        },
        "AuthorizerLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/authorizer.zip"
            },
            "Handler": "src/handlers/authorizer.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-authorizer",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AuthorizerLogGroup"
          ]
        },
        "ProcessLeaderboardLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/processLeaderboard.zip"
            },
            "Handler": "src/handlers/processLeaderboard.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-processLeaderboard",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ProcessLeaderboardLogGroup"
          ]
        },
        "LoginEventLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/loginEvent.zip"
            },
            "Handler": "src/handlers/loginEvent.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-loginEvent",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LoginEventLogGroup"
          ]
        },
        "SetWordOfTheDayLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/setWordOfTheDay.zip"
            },
            "Handler": "src/handlers/setWordOfTheDay.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-setWordOfTheDay",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>",
                "WORD_OF_THE_DAY_TABLE": "wordflect-backend-word-of-the-day-dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SetWordOfTheDayLogGroup"
          ]
        },
        "SearchUsersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/searchUsers.zip"
            },
            "Handler": "src/handlers/searchUsers.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-searchUsers",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SearchUsersLogGroup"
          ]
        },
        "DebugUserWordsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
              "S3Key": "serverless/wordflect-backend/dev/1758835764291-2025-09-25T21:29:24.291Z/debugUserWords.zip"
            },
            "Handler": "src/handlers/debugUserWords.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "wordflect-backend-dev-debugUserWords",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "USERS_TABLE": "wordflect-backend-users-dev",
                "MISSIONS_TABLE": "wordflect-backend-missions-dev",
                "FRAMES_TABLE": "wordflect-backend-frames-dev",
                "BATTLES_TABLE": "wordflect-backend-battles-dev",
                "JWT_SECRET": "<REDACTED>",
                "PASSWORD_RESET_TABLE": "<REDACTED>",
                "SES_FROM_EMAIL": "noreply@wordflect.com",
                "WORDNIK_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DebugUserWordsLogGroup"
          ]
        },
        "TestLambdaVersionTYfl025watCqC5Vz3Cw10VyKTZLQ2ZmLKi7P838NU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "TestLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "SigninLambdaVersionAOmV5SqgyilyIbWAXupWSnryrvVBlNFevq5dyGVgM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SigninLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "SignupLambdaVersions1Ts4FeTOFaQm6XiOvY5h1ffRRTfcGwSEYHjXjE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SignupLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "OauthLambdaVersionwG5HIwqdakZmvNBMSjUafEpLl67IROt6oyYmuGJUgPM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "OauthLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "ResetPasswordLambdaVersionTzULEnBvPZtpjLXW6M8jMYzdLj3RwP8Jxcb4yJPcpY": "<REDACTED>",
        "CheckEmailLambdaVersionn5BGnsKxN8Qyf8Lg0Auwj7Gl5T0RWnsucBpNP4H20A": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CheckEmailLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserProfileLambdaVersionlpRk5rfK08mzfgV7QfIvroiQhDMNTLgLRqQbuzCqqY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserProfileLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserDailyStatsLambdaVersionJQuSGFBLKHhZNx8rjsxI6JR5pzTwXYDlBZF2jbiXww": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserDailyStatsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserWeeklyStatsLambdaVersionBCJVzWfasFDCSz4QicmuUclbGvdfGNCUDVkgb79rYs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserWeeklyStatsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "OauthCheckLambdaVersionAs5hbRdDM4FDQZmWJ4qC2wzgPjT6pkBqD6fv6V514": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "OauthCheckLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserStatisticsLambdaVersionxIGbedBdXwuGZRPh0JuLXCPAQXSYVml9gCgUhFA98": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserStatisticsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "RequestPasswordResetLambdaVersionGe5MUty04QwAu6zih10hKEHb0hwMe8xzbkSvAPqtlFg": "<REDACTED>",
        "GetUserMonthlyStatsLambdaVersionZeBAGoMUdfDzYx1PWdoUxyvk628hJc98fi26vJcFs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserMonthlyStatsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "TrackUserSessionLambdaVersionMEAuqFmJQoofpMTs1IzOvBVZHu9E6yk6F6Prf0eYc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "TrackUserSessionLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserThemeDayStatsLambdaVersionmrX9uAKj5yWeAg4EbbgZtE0Qa5yutvMyUla9zVXHI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserThemeDayStatsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetProfileImageUploadUrlLambdaVersionDIqeWbAptfIO28kxHm6HOpnQgWOoOaqdpdV0cs34wNQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetProfileImageUploadUrlLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "UpdateUserStatsLambdaVersionOdJyikUvjPMmu8bdBhHD6CYfCRpCQBYs5nGmvQMdgNI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateUserStatsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserThemeAnalyticsLambdaVersionZpC3oWNLbN41cRYyhgMHAtDXCfnZVCYFHbWGVVMwQEI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserThemeAnalyticsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "UpdateProfileImageLambdaVersionXlz4eQPATKmHSj9g4TM1fT26eBJKnQAz29KdKWwhdc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateProfileImageLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "UpdateUserProfileBackgroundLambdaVersionmhEpFxDx6ICIlcRvQVgCtPQjVC8YmHPZsJDsyw7qkgY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateUserProfileBackgroundLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserProfileBackgroundLambdaVersionZXiz6RU3g3ZKLsiBizGREkHTSyDMCATH0ctFr6DdSA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserProfileBackgroundLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetLeaderboardLambdaVersionMfXVt3Y1BEHyhRlhyhxqXNywVziJCyr1AHKDEc4io": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetLeaderboardLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserMissionsLambdaVersionDWbnHv2K137sxPt09bvauTZkQbGQHSGbdn4yFHnEA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserMissionsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "CompleteUserMissionLambdaVersionx36gsWs8GwF6ULatMOVnvipW9GOmyXFMTvoLydjU0E": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CompleteUserMissionLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "MissionRewardsLambdaVersionHEWJvvobcdAQWCMUZ5cB518hnn8CvX292MTIOvfcio": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "MissionRewardsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetWordOfTheDayLambdaVersionj6eIcf2mUX15dFqp8ReX0jYF5HXcIB70IJ3j7IrM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetWordOfTheDayLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetUserFramesLambdaVersionRGGnmox6U42zrjVVA1GEY0IaHiKVvpdb9LkS06FELl4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserFramesLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetWordDefinitionLambdaVersionOHh2fmrpnkQSlv8J1SHrfxbQ0xIccRcyAGpP53Btp0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetWordDefinitionLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "SelectUserFrameLambdaVersionfBvTu9m2YHvlJsdVSDYSJ5gvUa4re2GJwXqF3Wxd8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SelectUserFrameLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "PurchasePremiumLambdaVersionHjtY3EYTj8fQXy420bn3WCb7Pz6ZFh1tO90HRh18": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PurchasePremiumLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "PurchaseFrameLambdaVersionMCQO2VLB8RlR3bIqv0e6Vf0fenXdeCDS7OKCOAUBs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PurchaseFrameLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "VerifySubscriptionLambdaVersioniSlqMUPZ0zvMrLEQJpCLE2nPAwgHBul7dUHIPlRLk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "VerifySubscriptionLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "VerifyPurchaseLambdaVersion7RgMtBD0sHxAWQxIOuT5vzw9ghO3z9x47uYT4iTtdg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "VerifyPurchaseLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "CreateBattleInvitationLambdaVersionqOfZM8KbZd5qVqehzWk3XxlJn4FbxIEuJBECtcoqRzQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateBattleInvitationLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetBattleInvitationsLambdaVersiondTewCKX7zqyplhIEgwhYmP5xDBztHGZ0bZ4J7Uj3g": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetBattleInvitationsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "RespondToBattleInvitationLambdaVersioninxp10clyZ4TOrUgUzJEqOLE77GK3LPnJP4zgjF1a6Y": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "RespondToBattleInvitationLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "SubmitBattleScoreLambdaVersionTv2XFcnLuiBiWZN2XKAKbMGn1t8YLO8A45C32OVKU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SubmitBattleScoreLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetActiveBattlesLambdaVersionnln35JieEfadwa7xBnbW9vEJe70oOq0XfvgkKIP70A": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetActiveBattlesLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "GetBattleHistoryLambdaVersionyRszlz29L9CAQgJ8DmGgw5phBXdv7hupG0PEox5pNi4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetBattleHistoryLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "UpdateBattleScoreLambdaVersiony8d2PraFiSFZdOTMNU3ZiB3x1E1oToQpTLRXc9vK8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateBattleScoreLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "CompleteBattleLambdaVersionD1Jm7HHMuGWMekzDnlM6j8mZCFVHRs3Ns0MFyUwQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CompleteBattleLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "CleanupOldBattlesLambdaVersionL5DRmZ08bj1NdHaXDoUx2jFDZsJWeXugIIYj83NpAo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CleanupOldBattlesLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "AuthorizerLambdaVersionLtjGPoNOyP2AAkPJMms5pgJXMDFQ0ceXmobmCJICU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AuthorizerLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "ProcessLeaderboardLambdaVersionXizgJ6VKrdAYeCXPCvaX5u1JrM4xzAMAzpEhH0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ProcessLeaderboardLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "LoginEventLambdaVersionX6I2uUZSt3zP0MIZWaaRSk3GVi4f6KCkpXY7v3o4g": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LoginEventLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "SearchUsersLambdaVersionzkx8pPQm7Gr6MpxnACNkimVSkcXWQ6cR73kl80nBb0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SearchUsersLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "SetWordOfTheDayLambdaVersionlVprrqPe9VQwgTJ6nH2mjBWo0PFMb4lgf30KwL8dwM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SetWordOfTheDayLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "DebugUserWordsLambdaVersionIqoRQdN9WBqAGPgJNZRNBjjQhyYxtCC4lUkp8YHfMjs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DebugUserWordsLambdaFunction"
            },
            "CodeSha256": "aKnOaxQTeenLTNbuMTzZE2YH2kzj77ov/nDtU9vcWws="
          }
        },
        "CleanupOldBattlesEventsRuleSchedule1": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "cron(0 3 * * ? *)",
            "State": "ENABLED",
            "Targets": [
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "CleanupOldBattlesLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "cleanupOldBattlesSchedule"
              }
            ]
          }
        },
        "CleanupOldBattlesLambdaPermissionEventsRuleSchedule1": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CleanupOldBattlesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "CleanupOldBattlesEventsRuleSchedule1",
                "Arn"
              ]
            }
          }
        },
        "ProcessLeaderboardEventsRuleSchedule1": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "cron(0 2 1 * ? *)",
            "State": "ENABLED",
            "Targets": [
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "ProcessLeaderboardLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "processLeaderboardSchedule"
              }
            ]
          }
        },
        "ProcessLeaderboardLambdaPermissionEventsRuleSchedule1": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ProcessLeaderboardLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ProcessLeaderboardEventsRuleSchedule1",
                "Arn"
              ]
            }
          }
        },
        "SetWordOfTheDayEventsRuleSchedule1": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "cron(0 0 * * ? *)",
            "State": "ENABLED",
            "Targets": [
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "SetWordOfTheDayLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "setWordOfTheDaySchedule"
              }
            ]
          }
        },
        "SetWordOfTheDayLambdaPermissionEventsRuleSchedule1": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SetWordOfTheDayLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "SetWordOfTheDayEventsRuleSchedule1",
                "Arn"
              ]
            }
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-wordflect-backend",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceTest": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "test",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceSignin": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "signin",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceSignup": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "signup",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuth": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "auth",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuthOauth": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAuth"
            },
            "PathPart": "oauth",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuthOauthDashcheck": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAuth"
            },
            "PathPart": "oauth-check",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceRequestDashpasswordDashreset": "<REDACTED>",
        "ApiGatewayResourceResetDashpassword": "<REDACTED>",
        "ApiGatewayResourceCheckDashemail": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "check-email",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUser": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "user",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserProfile": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "profile",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserStatistics": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "statistics",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserStatisticsDetailed": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserStatistics"
            },
            "PathPart": "detailed",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserStatisticsDaily": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserStatistics"
            },
            "PathPart": "daily",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserStatisticsWeekly": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserStatistics"
            },
            "PathPart": "weekly",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserStatisticsMonthly": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserStatistics"
            },
            "PathPart": "monthly",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserSession": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "session",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserSessionTrack": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserSession"
            },
            "PathPart": "track",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserTheme": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "theme",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserThemeAnalytics": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserTheme"
            },
            "PathPart": "analytics",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserThemeDay": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserTheme"
            },
            "PathPart": "day",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserUpdateDashstats": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "update-stats",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserProfileDashimageDashuploadDashurl": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "profile-image-upload-url",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserProfileDashimage": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "profile-image",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserProfileDashbackground": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "profile-background",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserMissions": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "missions",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserMissionsRewards": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUserMissions"
            },
            "PathPart": "rewards",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserCompleteDashmission": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "complete-mission",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserSelectDashframe": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "select-frame",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserPurchaseDashframe": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "purchase-frame",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserPurchaseDashpremium": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "purchase-premium",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserVerifyDashsubscription": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "verify-subscription",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserVerifyDashpurchase": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "verify-purchase",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUserLoginDashevent": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUser"
            },
            "PathPart": "login-event",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceLeaderboard": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "leaderboard",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceWord": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "word",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceWordDefinition": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceWord"
            },
            "PathPart": "definition",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceWordDashofDashtheDashday": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "word-of-the-day",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceFrames": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "frames",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattles": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "battles",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesInvite": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattles"
            },
            "PathPart": "invite",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesInvitations": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattles"
            },
            "PathPart": "invitations",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesInvitationsInvitationidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattlesInvitations"
            },
            "PathPart": "{invitationId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVar"
            },
            "PathPart": "respond",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesSubmitDashscore": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattles"
            },
            "PathPart": "submit-score",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesActive": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattles"
            },
            "PathPart": "active",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesHistory": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattles"
            },
            "PathPart": "history",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesScore": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattles"
            },
            "PathPart": "score",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceBattlesComplete": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceBattles"
            },
            "PathPart": "complete",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuthorizer": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "authorizer",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceSetDashwordDashofDashtheDashday": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "set-word-of-the-day",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "users",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsersSearch": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsers"
            },
            "PathPart": "search",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDebug": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "debug",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDebugUserDashwords": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceDebug"
            },
            "PathPart": "user-words",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodTestOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceTest"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodSignupOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceSignup"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuthOauthOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthOauth"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuthOauthDashcheckOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthOauthDashcheck"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodRequestDashpasswordDashresetOptions": "<REDACTED>",
        "ApiGatewayMethodResetDashpasswordOptions": "<REDACTED>",
        "ApiGatewayMethodCheckDashemailOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceCheckDashemail"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserProfileOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfile"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserStatisticsDetailedOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsDetailed"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserStatisticsDailyOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsDaily"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserStatisticsWeeklyOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsWeekly"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserStatisticsMonthlyOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsMonthly"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserSessionTrackOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserSessionTrack"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserThemeAnalyticsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserThemeAnalytics"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserThemeDayOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserThemeDay"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserUpdateDashstatsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserUpdateDashstats"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserProfileDashimageDashuploadDashurlOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfileDashimageDashuploadDashurl"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserProfileDashimageOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfileDashimage"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserProfileDashbackgroundOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfileDashbackground"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodLeaderboardOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceLeaderboard"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserMissionsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserMissions"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserCompleteDashmissionOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserCompleteDashmission"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserMissionsRewardsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserMissionsRewards"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodWordDefinitionOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceWordDefinition"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodWordDashofDashtheDashdayOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceWordDashofDashtheDashday"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodFramesOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceFrames"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserSelectDashframeOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserSelectDashframe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserPurchaseDashframeOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserPurchaseDashframe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserPurchaseDashpremiumOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserPurchaseDashpremium"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserVerifyDashsubscriptionOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserVerifyDashsubscription"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserVerifyDashpurchaseOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserVerifyDashpurchase"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesInviteOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesInvite"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesInvitationsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesInvitations"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesSubmitDashscoreOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesSubmitDashscore"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesActiveOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesActive"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesHistoryOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesHistory"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesScoreOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesScore"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodBattlesCompleteOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesComplete"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuthorizerOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthorizer"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUserLoginDasheventOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserLoginDashevent"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodSetDashwordDashofDashtheDashdayOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceSetDashwordDashofDashtheDashday"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsersSearchOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersSearch"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodDebugUserDashwordsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceDebugUserDashwords"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodTestGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceTest"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "TestLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "TestLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodSigninPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceSignin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SigninLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SigninLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodSigninOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "OPTIONS",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceSignin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SigninLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SigninLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodSignupPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceSignup"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SignupLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SignupLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAuthOauthPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthOauth"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OauthLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "OauthLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAuthOauthDashcheckPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthOauthDashcheck"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OauthCheckLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "OauthCheckLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodRequestDashpasswordDashresetPost": "<REDACTED>",
        "ApiGatewayMethodResetDashpasswordPost": "<REDACTED>",
        "ApiGatewayMethodCheckDashemailPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceCheckDashemail"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CheckEmailLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CheckEmailLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserProfileGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfile"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserProfileLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserProfileLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserStatisticsDetailedGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsDetailed"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserStatisticsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserStatisticsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserStatisticsDailyGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsDaily"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserDailyStatsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserDailyStatsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserStatisticsWeeklyGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsWeekly"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserWeeklyStatsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserWeeklyStatsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserStatisticsMonthlyGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserStatisticsMonthly"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserMonthlyStatsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserMonthlyStatsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserSessionTrackPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserSessionTrack"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "TrackUserSessionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "TrackUserSessionLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserThemeAnalyticsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserThemeAnalytics"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserThemeAnalyticsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserThemeAnalyticsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserThemeDayGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserThemeDay"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserThemeDayStatsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserThemeDayStatsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserUpdateDashstatsPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserUpdateDashstats"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateUserStatsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateUserStatsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserProfileDashimageDashuploadDashurlPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfileDashimageDashuploadDashurl"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetProfileImageUploadUrlLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetProfileImageUploadUrlLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserProfileDashimagePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfileDashimage"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateProfileImageLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateProfileImageLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserProfileDashbackgroundGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfileDashbackground"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserProfileBackgroundLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUserProfileDashbackgroundPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserProfileDashbackground"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateUserProfileBackgroundLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodLeaderboardGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceLeaderboard"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetLeaderboardLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetLeaderboardLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserMissionsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserMissions"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserMissionsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUserCompleteDashmissionPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserCompleteDashmission"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CompleteUserMissionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUserMissionsRewardsPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserMissionsRewards"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "MissionRewardsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "MissionRewardsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodWordDefinitionGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceWordDefinition"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetWordDefinitionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetWordDefinitionLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodWordDashofDashtheDashdayGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceWordDashofDashtheDashday"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetWordOfTheDayLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetWordOfTheDayLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodFramesGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceFrames"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserFramesLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserFramesLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserSelectDashframePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserSelectDashframe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SelectUserFrameLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUserPurchaseDashframePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserPurchaseDashframe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "PurchaseFrameLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUserPurchaseDashpremiumPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserPurchaseDashpremium"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "PurchasePremiumLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUserVerifyDashsubscriptionPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserVerifyDashsubscription"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "VerifySubscriptionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUserVerifyDashpurchasePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserVerifyDashpurchase"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "VerifyPurchaseLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodBattlesInvitePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesInvite"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateBattleInvitationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodBattlesInvitationsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesInvitations"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetBattleInvitationsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesInvitationsInvitationidVarRespond"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "RespondToBattleInvitationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodBattlesSubmitDashscorePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesSubmitDashscore"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SubmitBattleScoreLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SubmitBattleScoreLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodBattlesActiveGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesActive"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetActiveBattlesLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodBattlesHistoryGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesHistory"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetBattleHistoryLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodBattlesScorePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesScore"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateBattleScoreLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodBattlesCompletePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceBattlesComplete"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CompleteBattleLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAuthorizerPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthorizer"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizerLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUserLoginDasheventPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUserLoginDashevent"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LoginEventLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "LoginEventLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodSetDashwordDashofDashtheDashdayPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceSetDashwordDashofDashtheDashday"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SetWordOfTheDayLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SetWordOfTheDayLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsersSearchGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersSearch"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SearchUsersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SearchUsersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodDebugUserDashwordsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDebugUserDashwords"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DebugUserWordsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DebugUserWordsLambdaPermissionApiGateway"
          ]
        },
        "AuthorizerApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "IdentitySource": "method.request.header.Authorization",
            "Name": "authorizer",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "AuthorizerUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            },
            "Type": "TOKEN"
          }
        },
        "ApiGatewayDeployment1758835758341": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodTestOptions",
            "ApiGatewayMethodSignupOptions",
            "ApiGatewayMethodAuthOauthOptions",
            "ApiGatewayMethodAuthOauthDashcheckOptions",
            "ApiGatewayMethodRequestDashpasswordDashresetOptions",
            "ApiGatewayMethodResetDashpasswordOptions",
            "ApiGatewayMethodCheckDashemailOptions",
            "ApiGatewayMethodUserProfileOptions",
            "ApiGatewayMethodUserStatisticsDetailedOptions",
            "ApiGatewayMethodUserStatisticsDailyOptions",
            "ApiGatewayMethodUserStatisticsWeeklyOptions",
            "ApiGatewayMethodUserStatisticsMonthlyOptions",
            "ApiGatewayMethodUserSessionTrackOptions",
            "ApiGatewayMethodUserThemeAnalyticsOptions",
            "ApiGatewayMethodUserThemeDayOptions",
            "ApiGatewayMethodUserUpdateDashstatsOptions",
            "ApiGatewayMethodUserProfileDashimageDashuploadDashurlOptions",
            "ApiGatewayMethodUserProfileDashimageOptions",
            "ApiGatewayMethodUserProfileDashbackgroundOptions",
            "ApiGatewayMethodLeaderboardOptions",
            "ApiGatewayMethodUserMissionsOptions",
            "ApiGatewayMethodUserCompleteDashmissionOptions",
            "ApiGatewayMethodUserMissionsRewardsOptions",
            "ApiGatewayMethodWordDefinitionOptions",
            "ApiGatewayMethodWordDashofDashtheDashdayOptions",
            "ApiGatewayMethodFramesOptions",
            "ApiGatewayMethodUserSelectDashframeOptions",
            "ApiGatewayMethodUserPurchaseDashframeOptions",
            "ApiGatewayMethodUserPurchaseDashpremiumOptions",
            "ApiGatewayMethodUserVerifyDashsubscriptionOptions",
            "ApiGatewayMethodUserVerifyDashpurchaseOptions",
            "ApiGatewayMethodBattlesInviteOptions",
            "ApiGatewayMethodBattlesInvitationsOptions",
            "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondOptions",
            "ApiGatewayMethodBattlesSubmitDashscoreOptions",
            "ApiGatewayMethodBattlesActiveOptions",
            "ApiGatewayMethodBattlesHistoryOptions",
            "ApiGatewayMethodBattlesScoreOptions",
            "ApiGatewayMethodBattlesCompleteOptions",
            "ApiGatewayMethodAuthorizerOptions",
            "ApiGatewayMethodUserLoginDasheventOptions",
            "ApiGatewayMethodSetDashwordDashofDashtheDashdayOptions",
            "ApiGatewayMethodUsersSearchOptions",
            "ApiGatewayMethodDebugUserDashwordsOptions",
            "ApiGatewayMethodTestGet",
            "ApiGatewayMethodSigninPost",
            "ApiGatewayMethodSigninOptions",
            "ApiGatewayMethodSignupPost",
            "ApiGatewayMethodAuthOauthPost",
            "ApiGatewayMethodAuthOauthDashcheckPost",
            "ApiGatewayMethodRequestDashpasswordDashresetPost",
            "ApiGatewayMethodResetDashpasswordPost",
            "ApiGatewayMethodCheckDashemailPost",
            "ApiGatewayMethodUserProfileGet",
            "ApiGatewayMethodUserStatisticsDetailedGet",
            "ApiGatewayMethodUserStatisticsDailyGet",
            "ApiGatewayMethodUserStatisticsWeeklyGet",
            "ApiGatewayMethodUserStatisticsMonthlyGet",
            "ApiGatewayMethodUserSessionTrackPost",
            "ApiGatewayMethodUserThemeAnalyticsGet",
            "ApiGatewayMethodUserThemeDayGet",
            "ApiGatewayMethodUserUpdateDashstatsPost",
            "ApiGatewayMethodUserProfileDashimageDashuploadDashurlPost",
            "ApiGatewayMethodUserProfileDashimagePost",
            "ApiGatewayMethodUserProfileDashbackgroundGet",
            "ApiGatewayMethodUserProfileDashbackgroundPost",
            "ApiGatewayMethodLeaderboardGet",
            "ApiGatewayMethodUserMissionsGet",
            "ApiGatewayMethodUserCompleteDashmissionPost",
            "ApiGatewayMethodUserMissionsRewardsPost",
            "ApiGatewayMethodWordDefinitionGet",
            "ApiGatewayMethodWordDashofDashtheDashdayGet",
            "ApiGatewayMethodFramesGet",
            "ApiGatewayMethodUserSelectDashframePost",
            "ApiGatewayMethodUserPurchaseDashframePost",
            "ApiGatewayMethodUserPurchaseDashpremiumPost",
            "ApiGatewayMethodUserVerifyDashsubscriptionPost",
            "ApiGatewayMethodUserVerifyDashpurchasePost",
            "ApiGatewayMethodBattlesInvitePost",
            "ApiGatewayMethodBattlesInvitationsGet",
            "ApiGatewayMethodBattlesInvitationsInvitationidVarRespondPost",
            "ApiGatewayMethodBattlesSubmitDashscorePost",
            "ApiGatewayMethodBattlesActiveGet",
            "ApiGatewayMethodBattlesHistoryGet",
            "ApiGatewayMethodBattlesScorePost",
            "ApiGatewayMethodBattlesCompletePost",
            "ApiGatewayMethodAuthorizerPost",
            "ApiGatewayMethodUserLoginDasheventPost",
            "ApiGatewayMethodSetDashwordDashofDashtheDashdayPost",
            "ApiGatewayMethodUsersSearchGet",
            "ApiGatewayMethodDebugUserDashwordsGet"
          ]
        },
        "TestLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "TestLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SigninLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SigninLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SignupLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SignupLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "OauthLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "OauthLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "OauthCheckLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "OauthCheckLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "RequestPasswordResetLambdaPermissionApiGateway": "<REDACTED>",
        "ResetPasswordLambdaPermissionApiGateway": "<REDACTED>",
        "CheckEmailLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CheckEmailLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserProfileLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserProfileLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserStatisticsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserStatisticsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserDailyStatsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserDailyStatsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserWeeklyStatsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserWeeklyStatsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserMonthlyStatsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserMonthlyStatsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "TrackUserSessionLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "TrackUserSessionLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserThemeAnalyticsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserThemeAnalyticsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserThemeDayStatsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserThemeDayStatsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateUserStatsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateUserStatsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetProfileImageUploadUrlLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetProfileImageUploadUrlLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateProfileImageLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateProfileImageLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserProfileBackgroundLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserProfileBackgroundLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "AuthorizerLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AuthorizerLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateUserProfileBackgroundLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateUserProfileBackgroundLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetLeaderboardLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetLeaderboardLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserMissionsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserMissionsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CompleteUserMissionLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CompleteUserMissionLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "MissionRewardsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "MissionRewardsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetWordDefinitionLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetWordDefinitionLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetWordOfTheDayLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetWordOfTheDayLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserFramesLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserFramesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SelectUserFrameLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SelectUserFrameLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "PurchaseFrameLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PurchaseFrameLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "PurchasePremiumLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PurchasePremiumLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "VerifySubscriptionLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "VerifySubscriptionLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "VerifyPurchaseLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "VerifyPurchaseLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateBattleInvitationLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateBattleInvitationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetBattleInvitationsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetBattleInvitationsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "RespondToBattleInvitationLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RespondToBattleInvitationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SubmitBattleScoreLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SubmitBattleScoreLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetActiveBattlesLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetActiveBattlesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetBattleHistoryLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetBattleHistoryLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateBattleScoreLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateBattleScoreLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CompleteBattleLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CompleteBattleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "LoginEventLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LoginEventLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SetWordOfTheDayLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SetWordOfTheDayLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SearchUsersLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SearchUsersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DebugUserWordsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DebugUserWordsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wordflect-backend-users-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "username",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "UsernameIndex",
                "KeySchema": [
                  {
                    "AttributeName": "username",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "EmailIndex",
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "FramesTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wordflect-backend-frames-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "PasswordResetTokens": "<REDACTED>",
        "MissionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wordflect-backend-missions-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "WordOfTheDayTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "wordflect-backend-word-of-the-day-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "date",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "date",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "BattlesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "wordflect-backend-battles-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              },
              {
                "AttributeName": "challengerId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "opponentId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "status-challenger-index",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "challengerId",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "status-opponent-index",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "opponentId",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-2-26a6fe4c-7adc",
          "Export": {
            "Name": "sls-wordflect-backend-dev-ServerlessDeploymentBucketName"
          }
        },
        "TestLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "TestLambdaVersionTYfl025watCqC5Vz3Cw10VyKTZLQ2ZmLKi7P838NU"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-TestLambdaFunctionQualifiedArn"
          }
        },
        "SigninLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SigninLambdaVersionAOmV5SqgyilyIbWAXupWSnryrvVBlNFevq5dyGVgM"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-SigninLambdaFunctionQualifiedArn"
          }
        },
        "SignupLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SignupLambdaVersions1Ts4FeTOFaQm6XiOvY5h1ffRRTfcGwSEYHjXjE"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-SignupLambdaFunctionQualifiedArn"
          }
        },
        "OauthLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "OauthLambdaVersionwG5HIwqdakZmvNBMSjUafEpLl67IROt6oyYmuGJUgPM"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-OauthLambdaFunctionQualifiedArn"
          }
        },
        "ResetPasswordLambdaFunctionQualifiedArn": "<REDACTED>",
        "CheckEmailLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CheckEmailLambdaVersionn5BGnsKxN8Qyf8Lg0Auwj7Gl5T0RWnsucBpNP4H20A"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-CheckEmailLambdaFunctionQualifiedArn"
          }
        },
        "GetUserProfileLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserProfileLambdaVersionlpRk5rfK08mzfgV7QfIvroiQhDMNTLgLRqQbuzCqqY"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserProfileLambdaFunctionQualifiedArn"
          }
        },
        "GetUserDailyStatsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserDailyStatsLambdaVersionJQuSGFBLKHhZNx8rjsxI6JR5pzTwXYDlBZF2jbiXww"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserDailyStatsLambdaFunctionQualifiedArn"
          }
        },
        "GetUserWeeklyStatsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserWeeklyStatsLambdaVersionBCJVzWfasFDCSz4QicmuUclbGvdfGNCUDVkgb79rYs"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserWeeklyStatsLambdaFunctionQualifiedArn"
          }
        },
        "OauthCheckLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "OauthCheckLambdaVersionAs5hbRdDM4FDQZmWJ4qC2wzgPjT6pkBqD6fv6V514"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-OauthCheckLambdaFunctionQualifiedArn"
          }
        },
        "GetUserStatisticsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserStatisticsLambdaVersionxIGbedBdXwuGZRPh0JuLXCPAQXSYVml9gCgUhFA98"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserStatisticsLambdaFunctionQualifiedArn"
          }
        },
        "RequestPasswordResetLambdaFunctionQualifiedArn": "<REDACTED>",
        "GetUserMonthlyStatsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserMonthlyStatsLambdaVersionZeBAGoMUdfDzYx1PWdoUxyvk628hJc98fi26vJcFs"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserMonthlyStatsLambdaFunctionQualifiedArn"
          }
        },
        "TrackUserSessionLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "TrackUserSessionLambdaVersionMEAuqFmJQoofpMTs1IzOvBVZHu9E6yk6F6Prf0eYc"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-TrackUserSessionLambdaFunctionQualifiedArn"
          }
        },
        "GetUserThemeDayStatsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserThemeDayStatsLambdaVersionmrX9uAKj5yWeAg4EbbgZtE0Qa5yutvMyUla9zVXHI"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserThemeDayStatsLambdaFunctionQualifiedArn"
          }
        },
        "GetProfileImageUploadUrlLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetProfileImageUploadUrlLambdaVersionDIqeWbAptfIO28kxHm6HOpnQgWOoOaqdpdV0cs34wNQ"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetProfileImageUploadUrlLambdaFunctionQualifiedArn"
          }
        },
        "UpdateUserStatsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateUserStatsLambdaVersionOdJyikUvjPMmu8bdBhHD6CYfCRpCQBYs5nGmvQMdgNI"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-UpdateUserStatsLambdaFunctionQualifiedArn"
          }
        },
        "GetUserThemeAnalyticsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserThemeAnalyticsLambdaVersionZpC3oWNLbN41cRYyhgMHAtDXCfnZVCYFHbWGVVMwQEI"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserThemeAnalyticsLambdaFunctionQualifiedArn"
          }
        },
        "UpdateProfileImageLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateProfileImageLambdaVersionXlz4eQPATKmHSj9g4TM1fT26eBJKnQAz29KdKWwhdc"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-UpdateProfileImageLambdaFunctionQualifiedArn"
          }
        },
        "UpdateUserProfileBackgroundLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateUserProfileBackgroundLambdaVersionmhEpFxDx6ICIlcRvQVgCtPQjVC8YmHPZsJDsyw7qkgY"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-UpdateUserProfileBackgroundLambdaFunctionQualifiedArn"
          }
        },
        "GetUserProfileBackgroundLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserProfileBackgroundLambdaVersionZXiz6RU3g3ZKLsiBizGREkHTSyDMCATH0ctFr6DdSA"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserProfileBackgroundLambdaFunctionQualifiedArn"
          }
        },
        "GetLeaderboardLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetLeaderboardLambdaVersionMfXVt3Y1BEHyhRlhyhxqXNywVziJCyr1AHKDEc4io"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetLeaderboardLambdaFunctionQualifiedArn"
          }
        },
        "GetUserMissionsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserMissionsLambdaVersionDWbnHv2K137sxPt09bvauTZkQbGQHSGbdn4yFHnEA"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserMissionsLambdaFunctionQualifiedArn"
          }
        },
        "CompleteUserMissionLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CompleteUserMissionLambdaVersionx36gsWs8GwF6ULatMOVnvipW9GOmyXFMTvoLydjU0E"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-CompleteUserMissionLambdaFunctionQualifiedArn"
          }
        },
        "MissionRewardsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "MissionRewardsLambdaVersionHEWJvvobcdAQWCMUZ5cB518hnn8CvX292MTIOvfcio"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-MissionRewardsLambdaFunctionQualifiedArn"
          }
        },
        "GetWordOfTheDayLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetWordOfTheDayLambdaVersionj6eIcf2mUX15dFqp8ReX0jYF5HXcIB70IJ3j7IrM"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetWordOfTheDayLambdaFunctionQualifiedArn"
          }
        },
        "GetUserFramesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserFramesLambdaVersionRGGnmox6U42zrjVVA1GEY0IaHiKVvpdb9LkS06FELl4"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetUserFramesLambdaFunctionQualifiedArn"
          }
        },
        "GetWordDefinitionLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetWordDefinitionLambdaVersionOHh2fmrpnkQSlv8J1SHrfxbQ0xIccRcyAGpP53Btp0"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetWordDefinitionLambdaFunctionQualifiedArn"
          }
        },
        "SelectUserFrameLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SelectUserFrameLambdaVersionfBvTu9m2YHvlJsdVSDYSJ5gvUa4re2GJwXqF3Wxd8"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-SelectUserFrameLambdaFunctionQualifiedArn"
          }
        },
        "PurchasePremiumLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PurchasePremiumLambdaVersionHjtY3EYTj8fQXy420bn3WCb7Pz6ZFh1tO90HRh18"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-PurchasePremiumLambdaFunctionQualifiedArn"
          }
        },
        "PurchaseFrameLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PurchaseFrameLambdaVersionMCQO2VLB8RlR3bIqv0e6Vf0fenXdeCDS7OKCOAUBs"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-PurchaseFrameLambdaFunctionQualifiedArn"
          }
        },
        "VerifySubscriptionLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "VerifySubscriptionLambdaVersioniSlqMUPZ0zvMrLEQJpCLE2nPAwgHBul7dUHIPlRLk"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-VerifySubscriptionLambdaFunctionQualifiedArn"
          }
        },
        "VerifyPurchaseLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "VerifyPurchaseLambdaVersion7RgMtBD0sHxAWQxIOuT5vzw9ghO3z9x47uYT4iTtdg"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-VerifyPurchaseLambdaFunctionQualifiedArn"
          }
        },
        "CreateBattleInvitationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateBattleInvitationLambdaVersionqOfZM8KbZd5qVqehzWk3XxlJn4FbxIEuJBECtcoqRzQ"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-CreateBattleInvitationLambdaFunctionQualifiedArn"
          }
        },
        "GetBattleInvitationsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetBattleInvitationsLambdaVersiondTewCKX7zqyplhIEgwhYmP5xDBztHGZ0bZ4J7Uj3g"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetBattleInvitationsLambdaFunctionQualifiedArn"
          }
        },
        "RespondToBattleInvitationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "RespondToBattleInvitationLambdaVersioninxp10clyZ4TOrUgUzJEqOLE77GK3LPnJP4zgjF1a6Y"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-RespondToBattleInvitationLambdaFunctionQualifiedArn"
          }
        },
        "SubmitBattleScoreLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SubmitBattleScoreLambdaVersionTv2XFcnLuiBiWZN2XKAKbMGn1t8YLO8A45C32OVKU"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-SubmitBattleScoreLambdaFunctionQualifiedArn"
          }
        },
        "GetActiveBattlesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetActiveBattlesLambdaVersionnln35JieEfadwa7xBnbW9vEJe70oOq0XfvgkKIP70A"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetActiveBattlesLambdaFunctionQualifiedArn"
          }
        },
        "GetBattleHistoryLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetBattleHistoryLambdaVersionyRszlz29L9CAQgJ8DmGgw5phBXdv7hupG0PEox5pNi4"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-GetBattleHistoryLambdaFunctionQualifiedArn"
          }
        },
        "UpdateBattleScoreLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateBattleScoreLambdaVersiony8d2PraFiSFZdOTMNU3ZiB3x1E1oToQpTLRXc9vK8"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-UpdateBattleScoreLambdaFunctionQualifiedArn"
          }
        },
        "CompleteBattleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CompleteBattleLambdaVersionD1Jm7HHMuGWMekzDnlM6j8mZCFVHRs3Ns0MFyUwQ"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-CompleteBattleLambdaFunctionQualifiedArn"
          }
        },
        "CleanupOldBattlesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CleanupOldBattlesLambdaVersionL5DRmZ08bj1NdHaXDoUx2jFDZsJWeXugIIYj83NpAo"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-CleanupOldBattlesLambdaFunctionQualifiedArn"
          }
        },
        "AuthorizerLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AuthorizerLambdaVersionLtjGPoNOyP2AAkPJMms5pgJXMDFQ0ceXmobmCJICU"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-AuthorizerLambdaFunctionQualifiedArn"
          }
        },
        "ProcessLeaderboardLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ProcessLeaderboardLambdaVersionXizgJ6VKrdAYeCXPCvaX5u1JrM4xzAMAzpEhH0"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-ProcessLeaderboardLambdaFunctionQualifiedArn"
          }
        },
        "LoginEventLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LoginEventLambdaVersionX6I2uUZSt3zP0MIZWaaRSk3GVi4f6KCkpXY7v3o4g"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-LoginEventLambdaFunctionQualifiedArn"
          }
        },
        "SearchUsersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SearchUsersLambdaVersionzkx8pPQm7Gr6MpxnACNkimVSkcXWQ6cR73kl80nBb0"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-SearchUsersLambdaFunctionQualifiedArn"
          }
        },
        "SetWordOfTheDayLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SetWordOfTheDayLambdaVersionlVprrqPe9VQwgTJ6nH2mjBWo0PFMb4lgf30KwL8dwM"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-SetWordOfTheDayLambdaFunctionQualifiedArn"
          }
        },
        "DebugUserWordsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DebugUserWordsLambdaVersionIqoRQdN9WBqAGPgJNZRNBjjQhyYxtCC4lUkp8YHfMjs"
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-DebugUserWordsLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-wordflect-backend-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}